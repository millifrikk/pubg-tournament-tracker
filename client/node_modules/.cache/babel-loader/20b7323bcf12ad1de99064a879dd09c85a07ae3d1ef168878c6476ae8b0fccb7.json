{"ast":null,"code":"// client/src/services/tournamentService.js\nimport apiService from'./api';const BASE_URL='/api/tournaments';// Client-side cache for tournament data\nconst cache={data:{},timestamp:{},TTL:30000,// 30 second TTL for cache entries\n// Check if a cached item is still valid\nisValid(key){return this.data[key]&&this.timestamp[key]&&Date.now()-this.timestamp[key]<this.TTL;},// Get item from cache\nget(key){if(this.isValid(key)){console.log(`Using cached data for ${key}`);return this.data[key];}return null;},// Set item in cache\nset(key,data){console.log(`Caching data for ${key}`);this.data[key]=data;this.timestamp[key]=Date.now();},// Clear a specific item from cache\nclear(key){delete this.data[key];delete this.timestamp[key];},// Clear all cache\nclearAll(){this.data={};this.timestamp={};}};class TournamentService{// Get all tournaments\nasync getAllTournaments(){return apiService.get(BASE_URL);}// Get tournament by ID (with caching)\nasync getTournamentById(tournamentId){const cacheKey=`tournament_${tournamentId}`;// Try to get from cache first\nconst cachedData=cache.get(cacheKey);if(cachedData){return cachedData;}// If not in cache, make API request\ntry{console.log(`Fetching tournament ${tournamentId} from API`);// Make direct fetch request to bypass potential issues with the API service\nconst response=await fetch(`/api/tournaments/${tournamentId}`,{headers:{'Cache-Control':'max-age=30','Accept':'application/json'}});// First check if the response is OK\nif(!response.ok){const errorData=await response.json();throw new Error(errorData.error||`Server returned ${response.status}`);}// Parse the response JSON\nconst data=await response.json();// Log the exact response format for debugging\nconsole.log('Raw tournament response:',JSON.stringify(data));// Make sure we have valid data before caching\nif(data&&data.data){const processedResponse={data:data};console.log('Successfully processed tournament data');// Store in cache\ncache.set(cacheKey,processedResponse);return processedResponse;}else{console.warn('Missing or invalid tournament data in response:',data);throw new Error('Invalid response format from server');}}catch(error){// Handle rate limit specifically\nif(error.response&&error.response.status===429){console.warn('Rate limit hit when fetching tournament. Using stale cache if available.');// If we hit rate limits, try to use stale data if we have it\nif(cache.data[cacheKey]){console.log('Using stale cache data due to rate limit');return cache.data[cacheKey];}}console.error('Error fetching tournament:',error);throw error;}}// Create new tournament\nasync createTournament(tournamentData){console.log('Creating tournament with data:',tournamentData);// Ensure all dates are properly formatted\nconst formattedData={...tournamentData,startDate:tournamentData.startDate instanceof Date?tournamentData.startDate.toISOString():tournamentData.startDate,endDate:tournamentData.endDate instanceof Date?tournamentData.endDate.toISOString():tournamentData.endDate};console.log('Formatted data:',formattedData);return apiService.post(BASE_URL,formattedData);}// Update tournament\nasync updateTournament(tournamentId,tournamentData){return apiService.put(`${BASE_URL}/${tournamentId}`,tournamentData);}// Delete tournament\nasync deleteTournament(tournamentId){return apiService.delete(`${BASE_URL}/${tournamentId}`);}// Get tournament teams\nasync getTournamentTeams(tournamentId){return apiService.get(`${BASE_URL}/${tournamentId}/teams`);}// Add team to tournament\nasync addTeamToTournament(tournamentId,teamId){return apiService.post(`${BASE_URL}/${tournamentId}/teams`,{teamId});}// Remove team from tournament\nasync removeTeamFromTournament(tournamentId,teamId){return apiService.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);}// Get tournament matches\nasync getTournamentMatches(tournamentId){return apiService.get(`${BASE_URL}/${tournamentId}/matches`);}// Add match to tournament\nasync addMatchToTournament(tournamentId,matchData){return apiService.post(`${BASE_URL}/${tournamentId}/matches`,matchData);}// Get tournament leaderboard\nasync getTournamentLeaderboard(tournamentId){return apiService.get(`${BASE_URL}/${tournamentId}/leaderboard`);}// Join tournament (adding this missing function)\nasync joinTournament(tournamentId,teamId){console.log('Joining tournament:',tournamentId,'with team:',teamId);return this.addTeamToTournament(tournamentId,teamId);}// Clear specific cache entry\nclearCache(key){try{console.log(`Clearing cache for ${key}`);cache.clear(key);}catch(e){console.warn('Error clearing cache:',e);}}// Clear all cache\nclearAllCache(){console.log('Clearing all tournament cache');cache.clearAll();}}export default new TournamentService();","map":{"version":3,"names":["apiService","BASE_URL","cache","data","timestamp","TTL","isValid","key","Date","now","get","console","log","set","clear","clearAll","TournamentService","getAllTournaments","getTournamentById","tournamentId","cacheKey","cachedData","response","fetch","headers","ok","errorData","json","Error","error","status","JSON","stringify","processedResponse","warn","createTournament","tournamentData","formattedData","startDate","toISOString","endDate","post","updateTournament","put","deleteTournament","delete","getTournamentTeams","addTeamToTournament","teamId","removeTeamFromTournament","getTournamentMatches","addMatchToTournament","matchData","getTournamentLeaderboard","joinTournament","clearCache","e","clearAllCache"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/tournamentService.js"],"sourcesContent":["// client/src/services/tournamentService.js\n\nimport apiService from './api';\n\nconst BASE_URL = '/api/tournaments';\n\n// Client-side cache for tournament data\nconst cache = {\n  data: {},\n  timestamp: {},\n  TTL: 30000, // 30 second TTL for cache entries\n  \n  // Check if a cached item is still valid\n  isValid(key) {\n    return (\n      this.data[key] && \n      this.timestamp[key] && \n      Date.now() - this.timestamp[key] < this.TTL\n    );\n  },\n  \n  // Get item from cache\n  get(key) {\n    if (this.isValid(key)) {\n      console.log(`Using cached data for ${key}`);\n      return this.data[key];\n    }\n    return null;\n  },\n  \n  // Set item in cache\n  set(key, data) {\n    console.log(`Caching data for ${key}`);\n    this.data[key] = data;\n    this.timestamp[key] = Date.now();\n  },\n  \n  // Clear a specific item from cache\n  clear(key) {\n    delete this.data[key];\n    delete this.timestamp[key];\n  },\n  \n  // Clear all cache\n  clearAll() {\n    this.data = {};\n    this.timestamp = {};\n  }\n};\n\nclass TournamentService {\n  // Get all tournaments\n  async getAllTournaments() {\n    return apiService.get(BASE_URL);\n  }\n  \n  // Get tournament by ID (with caching)\n  async getTournamentById(tournamentId) {\n    const cacheKey = `tournament_${tournamentId}`;\n    \n    // Try to get from cache first\n    const cachedData = cache.get(cacheKey);\n    if (cachedData) {\n      return cachedData;\n    }\n    \n    // If not in cache, make API request\n    try {\n      console.log(`Fetching tournament ${tournamentId} from API`);\n      \n      // Make direct fetch request to bypass potential issues with the API service\n      const response = await fetch(`/api/tournaments/${tournamentId}`, {\n        headers: {\n          'Cache-Control': 'max-age=30',\n          'Accept': 'application/json'\n        }\n      });\n      \n      // First check if the response is OK\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Server returned ${response.status}`);\n      }\n      \n      // Parse the response JSON\n      const data = await response.json();\n      \n      // Log the exact response format for debugging\n      console.log('Raw tournament response:', JSON.stringify(data));\n      \n      // Make sure we have valid data before caching\n      if (data && data.data) {\n        const processedResponse = {\n          data: data\n        };\n        console.log('Successfully processed tournament data');\n        // Store in cache\n        cache.set(cacheKey, processedResponse);\n        return processedResponse;\n      } else {\n        console.warn('Missing or invalid tournament data in response:', data);\n        throw new Error('Invalid response format from server');\n      }\n    } catch (error) {\n      // Handle rate limit specifically\n      if (error.response && error.response.status === 429) {\n        console.warn('Rate limit hit when fetching tournament. Using stale cache if available.');\n        // If we hit rate limits, try to use stale data if we have it\n        if (cache.data[cacheKey]) {\n          console.log('Using stale cache data due to rate limit');\n          return cache.data[cacheKey];\n        }\n      }\n      \n      console.error('Error fetching tournament:', error);\n      throw error;\n    }\n  }\n  \n  // Create new tournament\n  async createTournament(tournamentData) {\n    console.log('Creating tournament with data:', tournamentData);\n    \n    // Ensure all dates are properly formatted\n    const formattedData = {\n      ...tournamentData,\n      startDate: tournamentData.startDate instanceof Date \n        ? tournamentData.startDate.toISOString() \n        : tournamentData.startDate,\n      endDate: tournamentData.endDate instanceof Date \n        ? tournamentData.endDate.toISOString() \n        : tournamentData.endDate\n    };\n    \n    console.log('Formatted data:', formattedData);\n    return apiService.post(BASE_URL, formattedData);\n  }\n  \n  // Update tournament\n  async updateTournament(tournamentId, tournamentData) {\n    return apiService.put(`${BASE_URL}/${tournamentId}`, tournamentData);\n  }\n  \n  // Delete tournament\n  async deleteTournament(tournamentId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}`);\n  }\n  \n  // Get tournament teams\n  async getTournamentTeams(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/teams`);\n  }\n  \n  // Add team to tournament\n  async addTeamToTournament(tournamentId, teamId) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/teams`, { teamId });\n  }\n  \n  // Remove team from tournament\n  async removeTeamFromTournament(tournamentId, teamId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);\n  }\n  \n  // Get tournament matches\n  async getTournamentMatches(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/matches`);\n  }\n  \n  // Add match to tournament\n  async addMatchToTournament(tournamentId, matchData) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/matches`, matchData);\n  }\n  \n  // Get tournament leaderboard\n  async getTournamentLeaderboard(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/leaderboard`);\n  }\n  \n  // Join tournament (adding this missing function)\n  async joinTournament(tournamentId, teamId) {\n    console.log('Joining tournament:', tournamentId, 'with team:', teamId);\n    return this.addTeamToTournament(tournamentId, teamId);\n  }\n  \n  // Clear specific cache entry\n  clearCache(key) {\n    try {\n      console.log(`Clearing cache for ${key}`);\n      cache.clear(key);\n    } catch (e) {\n      console.warn('Error clearing cache:', e);\n    }\n  }\n  \n  // Clear all cache\n  clearAllCache() {\n    console.log('Clearing all tournament cache');\n    cache.clearAll();\n  }\n}\n\nexport default new TournamentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}