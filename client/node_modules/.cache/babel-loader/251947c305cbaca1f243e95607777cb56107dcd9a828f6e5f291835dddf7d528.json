{"ast":null,"code":"// client/src/services/tournamentService.js\n\nimport apiService from './api';\nconst BASE_URL = '/api/tournaments';\n\n// Client-side cache for tournament data\nconst cache = {\n  data: {},\n  timestamp: {},\n  TTL: 30000,\n  // 30 second TTL for cache entries\n\n  // Check if a cached item is still valid\n  isValid(key) {\n    return this.data[key] && this.timestamp[key] && Date.now() - this.timestamp[key] < this.TTL;\n  },\n  // Get item from cache\n  get(key) {\n    if (this.isValid(key)) {\n      console.log(`Using cached data for ${key}`);\n      return this.data[key];\n    }\n    return null;\n  },\n  // Set item in cache\n  set(key, data) {\n    console.log(`Caching data for ${key}`);\n    this.data[key] = data;\n    this.timestamp[key] = Date.now();\n  },\n  // Clear a specific item from cache\n  clear(key) {\n    delete this.data[key];\n    delete this.timestamp[key];\n  },\n  // Clear all cache\n  clearAll() {\n    this.data = {};\n    this.timestamp = {};\n  }\n};\nclass TournamentService {\n  // Get all tournaments\n  async getAllTournaments() {\n    return apiService.get(BASE_URL);\n  }\n\n  // Get tournament by ID (with caching)\n  async getTournamentById(tournamentId) {\n    const cacheKey = `tournament_${tournamentId}`;\n\n    // Try to get from cache first\n    const cachedData = cache.get(cacheKey);\n    if (cachedData) {\n      return cachedData;\n    }\n\n    // If not in cache, make API request\n    try {\n      console.log(`Fetching tournament ${tournamentId} from API`);\n      const response = await apiService.get(`${BASE_URL}/${tournamentId}`, {\n        // Add cache headers\n        headers: {\n          'Cache-Control': 'max-age=30'\n        }\n      });\n\n      // Make sure we have valid data before caching\n      if (response && response.data && response.data.data) {\n        console.log('Successfully retrieved tournament data:', response.data.data.name);\n        // Store in cache\n        cache.set(cacheKey, response);\n      } else {\n        console.warn('Missing or invalid tournament data in response:', response);\n      }\n      return response;\n    } catch (error) {\n      // Handle rate limit specifically\n      if (error.response && error.response.status === 429) {\n        console.warn('Rate limit hit when fetching tournament. Using stale cache if available.');\n        // If we hit rate limits, try to use stale data if we have it\n        if (cache.data[cacheKey]) {\n          console.log('Using stale cache data due to rate limit');\n          return cache.data[cacheKey];\n        }\n      }\n      throw error;\n    }\n  }\n\n  // Create new tournament\n  async createTournament(tournamentData) {\n    console.log('Creating tournament with data:', tournamentData);\n\n    // Ensure all dates are properly formatted\n    const formattedData = {\n      ...tournamentData,\n      startDate: tournamentData.startDate instanceof Date ? tournamentData.startDate.toISOString() : tournamentData.startDate,\n      endDate: tournamentData.endDate instanceof Date ? tournamentData.endDate.toISOString() : tournamentData.endDate\n    };\n    console.log('Formatted data:', formattedData);\n    return apiService.post(BASE_URL, formattedData);\n  }\n\n  // Update tournament\n  async updateTournament(tournamentId, tournamentData) {\n    return apiService.put(`${BASE_URL}/${tournamentId}`, tournamentData);\n  }\n\n  // Delete tournament\n  async deleteTournament(tournamentId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}`);\n  }\n\n  // Get tournament teams\n  async getTournamentTeams(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/teams`);\n  }\n\n  // Add team to tournament\n  async addTeamToTournament(tournamentId, teamId) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/teams`, {\n      teamId\n    });\n  }\n\n  // Remove team from tournament\n  async removeTeamFromTournament(tournamentId, teamId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);\n  }\n\n  // Get tournament matches\n  async getTournamentMatches(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/matches`);\n  }\n\n  // Add match to tournament\n  async addMatchToTournament(tournamentId, matchData) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/matches`, matchData);\n  }\n\n  // Get tournament leaderboard\n  async getTournamentLeaderboard(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/leaderboard`);\n  }\n\n  // Join tournament (adding this missing function)\n  async joinTournament(tournamentId, teamId) {\n    console.log('Joining tournament:', tournamentId, 'with team:', teamId);\n    return this.addTeamToTournament(tournamentId, teamId);\n  }\n\n  // Clear specific cache entry\n  clearCache(key) {\n    console.log(`Clearing cache for ${key}`);\n    cache.clear(key);\n  }\n\n  // Clear all cache\n  clearAllCache() {\n    console.log('Clearing all tournament cache');\n    cache.clearAll();\n  }\n}\nexport default new TournamentService();","map":{"version":3,"names":["apiService","BASE_URL","cache","data","timestamp","TTL","isValid","key","Date","now","get","console","log","set","clear","clearAll","TournamentService","getAllTournaments","getTournamentById","tournamentId","cacheKey","cachedData","response","headers","name","warn","error","status","createTournament","tournamentData","formattedData","startDate","toISOString","endDate","post","updateTournament","put","deleteTournament","delete","getTournamentTeams","addTeamToTournament","teamId","removeTeamFromTournament","getTournamentMatches","addMatchToTournament","matchData","getTournamentLeaderboard","joinTournament","clearCache","clearAllCache"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/tournamentService.js"],"sourcesContent":["// client/src/services/tournamentService.js\n\nimport apiService from './api';\n\nconst BASE_URL = '/api/tournaments';\n\n// Client-side cache for tournament data\nconst cache = {\n  data: {},\n  timestamp: {},\n  TTL: 30000, // 30 second TTL for cache entries\n  \n  // Check if a cached item is still valid\n  isValid(key) {\n    return (\n      this.data[key] && \n      this.timestamp[key] && \n      Date.now() - this.timestamp[key] < this.TTL\n    );\n  },\n  \n  // Get item from cache\n  get(key) {\n    if (this.isValid(key)) {\n      console.log(`Using cached data for ${key}`);\n      return this.data[key];\n    }\n    return null;\n  },\n  \n  // Set item in cache\n  set(key, data) {\n    console.log(`Caching data for ${key}`);\n    this.data[key] = data;\n    this.timestamp[key] = Date.now();\n  },\n  \n  // Clear a specific item from cache\n  clear(key) {\n    delete this.data[key];\n    delete this.timestamp[key];\n  },\n  \n  // Clear all cache\n  clearAll() {\n    this.data = {};\n    this.timestamp = {};\n  }\n};\n\nclass TournamentService {\n  // Get all tournaments\n  async getAllTournaments() {\n    return apiService.get(BASE_URL);\n  }\n  \n  // Get tournament by ID (with caching)\n  async getTournamentById(tournamentId) {\n    const cacheKey = `tournament_${tournamentId}`;\n    \n    // Try to get from cache first\n    const cachedData = cache.get(cacheKey);\n    if (cachedData) {\n      return cachedData;\n    }\n    \n    // If not in cache, make API request\n    try {\n      console.log(`Fetching tournament ${tournamentId} from API`);\n      const response = await apiService.get(`${BASE_URL}/${tournamentId}`, {\n        // Add cache headers\n        headers: {\n          'Cache-Control': 'max-age=30'\n        }\n      });\n      \n      // Make sure we have valid data before caching\n      if (response && response.data && response.data.data) {\n        console.log('Successfully retrieved tournament data:', response.data.data.name);\n        // Store in cache\n        cache.set(cacheKey, response);\n      } else {\n        console.warn('Missing or invalid tournament data in response:', response);\n      }\n      return response;\n    } catch (error) {\n      // Handle rate limit specifically\n      if (error.response && error.response.status === 429) {\n        console.warn('Rate limit hit when fetching tournament. Using stale cache if available.');\n        // If we hit rate limits, try to use stale data if we have it\n        if (cache.data[cacheKey]) {\n          console.log('Using stale cache data due to rate limit');\n          return cache.data[cacheKey];\n        }\n      }\n      \n      throw error;\n    }\n  }\n  \n  // Create new tournament\n  async createTournament(tournamentData) {\n    console.log('Creating tournament with data:', tournamentData);\n    \n    // Ensure all dates are properly formatted\n    const formattedData = {\n      ...tournamentData,\n      startDate: tournamentData.startDate instanceof Date \n        ? tournamentData.startDate.toISOString() \n        : tournamentData.startDate,\n      endDate: tournamentData.endDate instanceof Date \n        ? tournamentData.endDate.toISOString() \n        : tournamentData.endDate\n    };\n    \n    console.log('Formatted data:', formattedData);\n    return apiService.post(BASE_URL, formattedData);\n  }\n  \n  // Update tournament\n  async updateTournament(tournamentId, tournamentData) {\n    return apiService.put(`${BASE_URL}/${tournamentId}`, tournamentData);\n  }\n  \n  // Delete tournament\n  async deleteTournament(tournamentId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}`);\n  }\n  \n  // Get tournament teams\n  async getTournamentTeams(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/teams`);\n  }\n  \n  // Add team to tournament\n  async addTeamToTournament(tournamentId, teamId) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/teams`, { teamId });\n  }\n  \n  // Remove team from tournament\n  async removeTeamFromTournament(tournamentId, teamId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);\n  }\n  \n  // Get tournament matches\n  async getTournamentMatches(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/matches`);\n  }\n  \n  // Add match to tournament\n  async addMatchToTournament(tournamentId, matchData) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/matches`, matchData);\n  }\n  \n  // Get tournament leaderboard\n  async getTournamentLeaderboard(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/leaderboard`);\n  }\n  \n  // Join tournament (adding this missing function)\n  async joinTournament(tournamentId, teamId) {\n    console.log('Joining tournament:', tournamentId, 'with team:', teamId);\n    return this.addTeamToTournament(tournamentId, teamId);\n  }\n  \n  // Clear specific cache entry\n  clearCache(key) {\n    console.log(`Clearing cache for ${key}`);\n    cache.clear(key);\n  }\n  \n  // Clear all cache\n  clearAllCache() {\n    console.log('Clearing all tournament cache');\n    cache.clearAll();\n  }\n}\n\nexport default new TournamentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}