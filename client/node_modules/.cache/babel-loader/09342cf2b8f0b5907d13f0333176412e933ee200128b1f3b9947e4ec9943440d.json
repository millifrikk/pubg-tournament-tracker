{"ast":null,"code":"// client/src/services/api.js\n\n// We'll get the token directly from localStorage to avoid circular dependency\nconsole.log('Initializing API service');\n\n// Base API class that handles requests with authentication\nclass ApiService {\n  // Get request with auth\n  async get(url, options = {}) {\n    return this.request('GET', url, null, options);\n  }\n\n  // Post request with auth\n  async post(url, data, options = {}) {\n    return this.request('POST', url, data, options);\n  }\n\n  // Put request with auth\n  async put(url, data, options = {}) {\n    return this.request('PUT', url, data, options);\n  }\n\n  // Delete request with auth\n  async delete(url, options = {}) {\n    return this.request('DELETE', url, null, options);\n  }\n\n  // Universal request method\n  async request(method, url, data = null, options = {}) {\n    try {\n      // Get token directly from localStorage to avoid circular dependency\n      const token = localStorage.getItem('token');\n\n      // Prepare headers\n      const headers = {\n        'Content-Type': 'application/json',\n        ...options.headers\n      };\n\n      // Add auth header if token exists\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('Adding auth header with token');\n      } else {\n        console.warn('No token available for request to ' + url);\n        // For requests to protected routes, this will likely fail\n        // Add a more descriptive error message\n        if (url.includes('/api/teams') || url.includes('/api/tournaments')) {\n          throw new Error('Authorization token missing. You may need to log in again.');\n        }\n      }\n\n      // Log the request for debugging\n      console.log(`API ${method} request to ${url}`);\n      console.log('Headers:', headers);\n      if (data) console.log('Data:', data);\n\n      // Build request config\n      const config = {\n        method,\n        headers,\n        ...options\n      };\n\n      // Add body for non-GET requests\n      if (data && method !== 'GET') {\n        config.body = JSON.stringify(data);\n      }\n\n      // Make the request\n      const response = await fetch(url, config);\n\n      // Parse the JSON response\n      const responseData = await response.json();\n\n      // Handle unsuccessful responses\n      if (!response.ok) {\n        // Check for authentication errors\n        if (response.status === 401) {\n          console.error('Authentication error');\n          // You might want to redirect to login page here\n          // Remove token directly without using authService\n          localStorage.removeItem('token');\n          // Log authentication error for debugging\n          console.log('Auth error detected, token removed');\n        }\n\n        // Log detailed error information\n        console.error('API response error:', {\n          status: response.status,\n          statusText: response.statusText,\n          responseData\n        });\n        throw new Error(responseData.error || responseData.details || `Request failed with status ${response.status}`);\n      }\n      return responseData;\n    } catch (error) {\n      console.error(`API error (${method} ${url}):`, error);\n      throw error;\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["console","log","ApiService","get","url","options","request","post","data","put","delete","method","token","localStorage","getItem","headers","warn","includes","Error","config","body","JSON","stringify","response","fetch","responseData","json","ok","status","error","removeItem","statusText","details"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\n\n// We'll get the token directly from localStorage to avoid circular dependency\nconsole.log('Initializing API service')\n\n// Base API class that handles requests with authentication\nclass ApiService {\n  // Get request with auth\n  async get(url, options = {}) {\n    return this.request('GET', url, null, options);\n  }\n  \n  // Post request with auth\n  async post(url, data, options = {}) {\n    return this.request('POST', url, data, options);\n  }\n  \n  // Put request with auth\n  async put(url, data, options = {}) {\n    return this.request('PUT', url, data, options);\n  }\n  \n  // Delete request with auth\n  async delete(url, options = {}) {\n    return this.request('DELETE', url, null, options);\n  }\n  \n  // Universal request method\n  async request(method, url, data = null, options = {}) {\n    try {\n      // Get token directly from localStorage to avoid circular dependency\n      const token = localStorage.getItem('token');\n      \n      // Prepare headers\n      const headers = {\n        'Content-Type': 'application/json',\n        ...options.headers\n      };\n      \n      // Add auth header if token exists\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('Adding auth header with token');\n      } else {\n        console.warn('No token available for request to ' + url);\n        // For requests to protected routes, this will likely fail\n        // Add a more descriptive error message\n        if (url.includes('/api/teams') || url.includes('/api/tournaments')) {\n          throw new Error('Authorization token missing. You may need to log in again.');\n        }\n      }\n      \n      // Log the request for debugging\n      console.log(`API ${method} request to ${url}`);\n      console.log('Headers:', headers);\n      if (data) console.log('Data:', data);\n      \n      // Build request config\n      const config = {\n        method,\n        headers,\n        ...options\n      };\n      \n      // Add body for non-GET requests\n      if (data && method !== 'GET') {\n        config.body = JSON.stringify(data);\n      }\n      \n      // Make the request\n      const response = await fetch(url, config);\n      \n      // Parse the JSON response\n      const responseData = await response.json();\n      \n      // Handle unsuccessful responses\n      if (!response.ok) {\n        // Check for authentication errors\n        if (response.status === 401) {\n          console.error('Authentication error');\n          // You might want to redirect to login page here\n          // Remove token directly without using authService\n          localStorage.removeItem('token');\n          // Log authentication error for debugging\n          console.log('Auth error detected, token removed');\n        }\n        \n        // Log detailed error information\n        console.error('API response error:', {\n          status: response.status,\n          statusText: response.statusText,\n          responseData\n        });\n        \n        throw new Error(responseData.error || responseData.details || `Request failed with status ${response.status}`);\n      }\n      \n      return responseData;\n    } catch (error) {\n      console.error(`API error (${method} ${url}):`, error);\n      throw error;\n    }\n  }\n}\n\nexport default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}