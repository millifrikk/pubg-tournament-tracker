{"ast":null,"code":"// client/src/services/authService.js\n\nconst TOKEN_KEY = 'token'; // Make sure this is consistent across all files\n\nclass AuthService {\n  // Login user and store token\n  async login(credentials) {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n      this.setToken(data.token);\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Set token in localStorage and set default auth header\n  setToken(token) {\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n      // If you're using axios, set the default header\n      if (window.axios) {\n        window.axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      }\n      console.log('Token stored successfully');\n    }\n  }\n\n  // Get token from localStorage\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  // Get auth header value\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return {\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    return {};\n  }\n\n  // Check if user is logged in\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  // Logout user\n  logout() {\n    localStorage.removeItem(TOKEN_KEY);\n    // If you're using axios, remove the default header\n    if (window.axios) {\n      delete window.axios.defaults.headers.common['Authorization'];\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["TOKEN_KEY","AuthService","login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","setToken","token","console","localStorage","setItem","window","axios","defaults","common","log","getToken","getItem","getAuthHeader","isLoggedIn","logout","removeItem"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/authService.js"],"sourcesContent":["// client/src/services/authService.js\n\nconst TOKEN_KEY = 'token'; // Make sure this is consistent across all files\n\nclass AuthService {\n  // Login user and store token\n  async login(credentials) {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n      \n      this.setToken(data.token);\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n  \n  // Set token in localStorage and set default auth header\n  setToken(token) {\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n      // If you're using axios, set the default header\n      if (window.axios) {\n        window.axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      }\n      console.log('Token stored successfully');\n    }\n  }\n  \n  // Get token from localStorage\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n  \n  // Get auth header value\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return { 'Authorization': `Bearer ${token}` };\n    }\n    return {};\n  }\n  \n  // Check if user is logged in\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  \n  // Logout user\n  logout() {\n    localStorage.removeItem(TOKEN_KEY);\n    // If you're using axios, remove the default header\n    if (window.axios) {\n      delete window.axios.defaults.headers.common['Authorization'];\n    }\n  }\n}\n\nexport default new AuthService();"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,OAAO,CAAC,CAAC;;AAE3B,MAAMC,WAAW,CAAC;EAChB;EACA,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;QAC9CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;MAClC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,cAAc,CAAC;MAC/C;MAEA,IAAI,CAACC,QAAQ,CAACL,IAAI,CAACM,KAAK,CAAC;MACzB,OAAON,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;;EAEA;EACAC,QAAQA,CAACC,KAAK,EAAE;IACd,IAAIA,KAAK,EAAE;MACTE,YAAY,CAACC,OAAO,CAACpB,SAAS,EAAEiB,KAAK,CAAC;MACtC;MACA,IAAII,MAAM,CAACC,KAAK,EAAE;QAChBD,MAAM,CAACC,KAAK,CAACC,QAAQ,CAAChB,OAAO,CAACiB,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUP,KAAK,EAAE;MAC3E;MACAC,OAAO,CAACO,GAAG,CAAC,2BAA2B,CAAC;IAC1C;EACF;;EAEA;EACAC,QAAQA,CAAA,EAAG;IACT,OAAOP,YAAY,CAACQ,OAAO,CAAC3B,SAAS,CAAC;EACxC;;EAEA;EACA4B,aAAaA,CAAA,EAAG;IACd,MAAMX,KAAK,GAAG,IAAI,CAACS,QAAQ,CAAC,CAAC;IAC7B,IAAIT,KAAK,EAAE;MACT,OAAO;QAAE,eAAe,EAAE,UAAUA,KAAK;MAAG,CAAC;IAC/C;IACA,OAAO,CAAC,CAAC;EACX;;EAEA;EACAY,UAAUA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC,IAAI,CAACH,QAAQ,CAAC,CAAC;EAC1B;;EAEA;EACAI,MAAMA,CAAA,EAAG;IACPX,YAAY,CAACY,UAAU,CAAC/B,SAAS,CAAC;IAClC;IACA,IAAIqB,MAAM,CAACC,KAAK,EAAE;MAChB,OAAOD,MAAM,CAACC,KAAK,CAACC,QAAQ,CAAChB,OAAO,CAACiB,MAAM,CAAC,eAAe,CAAC;IAC9D;EACF;AACF;AAEA,eAAe,IAAIvB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}