{"ast":null,"code":"// client/src/services/api.js\n\nimport authService from './authService';\n\n// Base API class that handles requests with authentication\nclass ApiService {\n  // Get request with auth\n  async get(url, options = {}) {\n    return this.request('GET', url, null, options);\n  }\n\n  // Post request with auth\n  async post(url, data, options = {}) {\n    return this.request('POST', url, data, options);\n  }\n\n  // Put request with auth\n  async put(url, data, options = {}) {\n    return this.request('PUT', url, data, options);\n  }\n\n  // Delete request with auth\n  async delete(url, options = {}) {\n    return this.request('DELETE', url, null, options);\n  }\n\n  // Universal request method\n  async request(method, url, data = null, options = {}) {\n    try {\n      // Prepare headers\n      const headers = {\n        'Content-Type': 'application/json',\n        ...authService.getAuthHeader(),\n        // Add auth header\n        ...options.headers\n      };\n\n      // Log the request for debugging\n      console.log(`API ${method} request to ${url}`);\n      console.log('Headers:', headers);\n      if (data) console.log('Data:', data);\n\n      // Build request config\n      const config = {\n        method,\n        headers,\n        ...options\n      };\n\n      // Add body for non-GET requests\n      if (data && method !== 'GET') {\n        config.body = JSON.stringify(data);\n      }\n\n      // Make the request\n      const response = await fetch(url, config);\n\n      // Parse the JSON response\n      const responseData = await response.json();\n\n      // Handle unsuccessful responses\n      if (!response.ok) {\n        // Check for authentication errors\n        if (response.status === 401) {\n          console.error('Authentication error');\n          // You might want to redirect to login page here\n          authService.logout();\n          // If you're using React Router: window.location.href = '/login';\n        }\n        throw new Error(responseData.error || `Request failed with status ${response.status}`);\n      }\n      return responseData;\n    } catch (error) {\n      console.error(`API error (${method} ${url}):`, error);\n      throw error;\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["authService","ApiService","get","url","options","request","post","data","put","delete","method","headers","getAuthHeader","console","log","config","body","JSON","stringify","response","fetch","responseData","json","ok","status","error","logout","Error"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\n\nimport authService from './authService';\n\n// Base API class that handles requests with authentication\nclass ApiService {\n  // Get request with auth\n  async get(url, options = {}) {\n    return this.request('GET', url, null, options);\n  }\n  \n  // Post request with auth\n  async post(url, data, options = {}) {\n    return this.request('POST', url, data, options);\n  }\n  \n  // Put request with auth\n  async put(url, data, options = {}) {\n    return this.request('PUT', url, data, options);\n  }\n  \n  // Delete request with auth\n  async delete(url, options = {}) {\n    return this.request('DELETE', url, null, options);\n  }\n  \n  // Universal request method\n  async request(method, url, data = null, options = {}) {\n    try {\n      // Prepare headers\n      const headers = {\n        'Content-Type': 'application/json',\n        ...authService.getAuthHeader(), // Add auth header\n        ...options.headers\n      };\n      \n      // Log the request for debugging\n      console.log(`API ${method} request to ${url}`);\n      console.log('Headers:', headers);\n      if (data) console.log('Data:', data);\n      \n      // Build request config\n      const config = {\n        method,\n        headers,\n        ...options\n      };\n      \n      // Add body for non-GET requests\n      if (data && method !== 'GET') {\n        config.body = JSON.stringify(data);\n      }\n      \n      // Make the request\n      const response = await fetch(url, config);\n      \n      // Parse the JSON response\n      const responseData = await response.json();\n      \n      // Handle unsuccessful responses\n      if (!response.ok) {\n        // Check for authentication errors\n        if (response.status === 401) {\n          console.error('Authentication error');\n          // You might want to redirect to login page here\n          authService.logout();\n          // If you're using React Router: window.location.href = '/login';\n        }\n        \n        throw new Error(responseData.error || `Request failed with status ${response.status}`);\n      }\n      \n      return responseData;\n    } catch (error) {\n      console.error(`API error (${method} ${url}):`, error);\n      throw error;\n    }\n  }\n}\n\nexport default new ApiService();"],"mappings":"AAAA;;AAEA,OAAOA,WAAW,MAAM,eAAe;;AAEvC;AACA,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,GAAGA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3B,OAAO,IAAI,CAACC,OAAO,CAAC,KAAK,EAAEF,GAAG,EAAE,IAAI,EAAEC,OAAO,CAAC;EAChD;;EAEA;EACA,MAAME,IAAIA,CAACH,GAAG,EAAEI,IAAI,EAAEH,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,OAAO,IAAI,CAACC,OAAO,CAAC,MAAM,EAAEF,GAAG,EAAEI,IAAI,EAAEH,OAAO,CAAC;EACjD;;EAEA;EACA,MAAMI,GAAGA,CAACL,GAAG,EAAEI,IAAI,EAAEH,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,OAAO,IAAI,CAACC,OAAO,CAAC,KAAK,EAAEF,GAAG,EAAEI,IAAI,EAAEH,OAAO,CAAC;EAChD;;EAEA;EACA,MAAMK,MAAMA,CAACN,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9B,OAAO,IAAI,CAACC,OAAO,CAAC,QAAQ,EAAEF,GAAG,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnD;;EAEA;EACA,MAAMC,OAAOA,CAACK,MAAM,EAAEP,GAAG,EAAEI,IAAI,GAAG,IAAI,EAAEH,OAAO,GAAG,CAAC,CAAC,EAAE;IACpD,IAAI;MACF;MACA,MAAMO,OAAO,GAAG;QACd,cAAc,EAAE,kBAAkB;QAClC,GAAGX,WAAW,CAACY,aAAa,CAAC,CAAC;QAAE;QAChC,GAAGR,OAAO,CAACO;MACb,CAAC;;MAED;MACAE,OAAO,CAACC,GAAG,CAAC,OAAOJ,MAAM,eAAeP,GAAG,EAAE,CAAC;MAC9CU,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,OAAO,CAAC;MAChC,IAAIJ,IAAI,EAAEM,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEP,IAAI,CAAC;;MAEpC;MACA,MAAMQ,MAAM,GAAG;QACbL,MAAM;QACNC,OAAO;QACP,GAAGP;MACL,CAAC;;MAED;MACA,IAAIG,IAAI,IAAIG,MAAM,KAAK,KAAK,EAAE;QAC5BK,MAAM,CAACC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC;MACpC;;MAEA;MACA,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACjB,GAAG,EAAEY,MAAM,CAAC;;MAEzC;MACA,MAAMM,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAE1C;MACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB;QACA,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;UAC3BX,OAAO,CAACY,KAAK,CAAC,sBAAsB,CAAC;UACrC;UACAzB,WAAW,CAAC0B,MAAM,CAAC,CAAC;UACpB;QACF;QAEA,MAAM,IAAIC,KAAK,CAACN,YAAY,CAACI,KAAK,IAAI,8BAA8BN,QAAQ,CAACK,MAAM,EAAE,CAAC;MACxF;MAEA,OAAOH,YAAY;IACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,cAAcf,MAAM,IAAIP,GAAG,IAAI,EAAEsB,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAe,IAAIxB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}