{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useRef}from'react';import io from'socket.io-client';// Create the socket context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext();// Socket provider component\nexport const SocketProvider=_ref=>{let{children}=_ref;const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[joinedMatches,setJoinedMatches]=useState([]);// Use a ref to keep track of active matches without causing re-renders\nconst joinedMatchesRef=useRef([]);// Create socket as a ref to avoid recreation\nconst socketRef=useRef(null);// Initialize socket connection once\nuseEffect(()=>{// Get base URL from environment or use default\nconst baseUrl=process.env.REACT_APP_SOCKET_URL||window.location.origin;// Create socket instance only if it doesn't exist\nif(!socketRef.current){console.log('Creating new socket connection');socketRef.current=io(baseUrl,{autoConnect:true,reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000,timeout:10000});// Socket event handlers\nsocketRef.current.on('connect',()=>{console.log('Socket connected');setIsConnected(true);// Rejoin any previously joined match rooms after a small delay\n// Using the ref instead of state to avoid render loops\nsetTimeout(()=>{if(joinedMatchesRef.current.length>0){console.log(`Rejoining ${joinedMatchesRef.current.length} match rooms`);joinedMatchesRef.current.forEach(matchId=>{socketRef.current.emit('join-match',{matchId});});}},300);});socketRef.current.on('disconnect',()=>{console.log('Socket disconnected');setIsConnected(false);});socketRef.current.on('connect_error',error=>{console.error('Socket connection error:',error);});// Save socket instance to state for components to use\nsetSocket(socketRef.current);}// Cleanup on unmount\nreturn()=>{// We don't disconnect on unmount because other components might still need it\n// Instead we just log that we're leaving the component\nconsole.log('SocketProvider unmounting');};},[]);// Empty dependency array - this effect runs exactly once\n// Join a match room to receive updates\nconst joinMatch=matchId=>{if(!matchId)return;console.log(`Joining match room: ${matchId}`);if(socketRef.current){socketRef.current.emit('join-match',{matchId});}// Track joined matches in both state and ref\n// The ref is used for reconnection logic to avoid render loops\nif(!joinedMatchesRef.current.includes(matchId)){joinedMatchesRef.current.push(matchId);// Also update state for component usage but throttle it\n// This won't cause rapid re-renders in components using this context\nsetJoinedMatches(prevMatches=>{if(!prevMatches.includes(matchId)){return[...prevMatches,matchId];}return prevMatches;});}};// Leave a match room\nconst leaveMatch=matchId=>{if(!matchId)return;console.log(`Leaving match room: ${matchId}`);if(socketRef.current){socketRef.current.emit('leave-match',{matchId});}// Update both the ref and the state\njoinedMatchesRef.current=joinedMatchesRef.current.filter(id=>id!==matchId);setJoinedMatches(prevMatches=>prevMatches.filter(id=>id!==matchId));};// Socket context value - memoize to avoid unnecessary re-renders\nconst contextValue=React.useMemo(()=>({socket,isConnected,joinMatch,leaveMatch,// Event subscription helpers\nsubscribeToEvent:(event,callback)=>{if(socketRef.current){socketRef.current.on(event,callback);return()=>{var _socketRef$current;return(_socketRef$current=socketRef.current)===null||_socketRef$current===void 0?void 0:_socketRef$current.off(event,callback);};}return()=>{};},emitEvent:(event,data)=>{if(socketRef.current){socketRef.current.emit(event,data);}}}),[socket,isConnected]);// Only depend on these two state variables\nreturn/*#__PURE__*/_jsx(SocketContext.Provider,{value:contextValue,children:children});};// Custom hook to use the socket context\nexport const useSocket=()=>{const context=useContext(SocketContext);if(!context){console.warn('useSocket must be used within a SocketProvider');// Return mock implementation to prevent errors\nreturn{socket:null,isConnected:false,joinMatch:()=>{},leaveMatch:()=>{},subscribeToEvent:()=>()=>{},emitEvent:()=>{}};}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","io","jsx","_jsx","SocketContext","SocketProvider","_ref","children","socket","setSocket","isConnected","setIsConnected","joinedMatches","setJoinedMatches","joinedMatchesRef","socketRef","baseUrl","process","env","REACT_APP_SOCKET_URL","window","location","origin","current","console","log","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","setTimeout","length","forEach","matchId","emit","error","joinMatch","includes","push","prevMatches","leaveMatch","filter","id","contextValue","useMemo","subscribeToEvent","event","callback","_socketRef$current","off","emitEvent","data","Provider","value","useSocket","context","warn"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\n\n// Create the socket context\nconst SocketContext = createContext();\n\n// Socket provider component\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [joinedMatches, setJoinedMatches] = useState([]);\n\n  // Use a ref to keep track of active matches without causing re-renders\n  const joinedMatchesRef = useRef([]);\n  \n  // Create socket as a ref to avoid recreation\n  const socketRef = useRef(null);\n\n  // Initialize socket connection once\n  useEffect(() => {\n    // Get base URL from environment or use default\n    const baseUrl = process.env.REACT_APP_SOCKET_URL || window.location.origin;\n    \n    // Create socket instance only if it doesn't exist\n    if (!socketRef.current) {\n      console.log('Creating new socket connection');\n      socketRef.current = io(baseUrl, {\n        autoConnect: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000,\n        timeout: 10000\n      });\n\n      // Socket event handlers\n      socketRef.current.on('connect', () => {\n        console.log('Socket connected');\n        setIsConnected(true);\n        \n        // Rejoin any previously joined match rooms after a small delay\n        // Using the ref instead of state to avoid render loops\n        setTimeout(() => {\n          if (joinedMatchesRef.current.length > 0) {\n            console.log(`Rejoining ${joinedMatchesRef.current.length} match rooms`);\n            joinedMatchesRef.current.forEach(matchId => {\n              socketRef.current.emit('join-match', { matchId });\n            });\n          }\n        }, 300);\n      });\n\n      socketRef.current.on('disconnect', () => {\n        console.log('Socket disconnected');\n        setIsConnected(false);\n      });\n\n      socketRef.current.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n      });\n\n      // Save socket instance to state for components to use\n      setSocket(socketRef.current);\n    }\n\n    // Cleanup on unmount\n    return () => {\n      // We don't disconnect on unmount because other components might still need it\n      // Instead we just log that we're leaving the component\n      console.log('SocketProvider unmounting');\n    };\n  }, []); // Empty dependency array - this effect runs exactly once\n\n  // Join a match room to receive updates\n  const joinMatch = (matchId) => {\n    if (!matchId) return;\n    \n    console.log(`Joining match room: ${matchId}`);\n    \n    if (socketRef.current) {\n      socketRef.current.emit('join-match', { matchId });\n    }\n    \n    // Track joined matches in both state and ref\n    // The ref is used for reconnection logic to avoid render loops\n    if (!joinedMatchesRef.current.includes(matchId)) {\n      joinedMatchesRef.current.push(matchId);\n      \n      // Also update state for component usage but throttle it\n      // This won't cause rapid re-renders in components using this context\n      setJoinedMatches(prevMatches => {\n        if (!prevMatches.includes(matchId)) {\n          return [...prevMatches, matchId];\n        }\n        return prevMatches;\n      });\n    }\n  };\n\n  // Leave a match room\n  const leaveMatch = (matchId) => {\n    if (!matchId) return;\n    \n    console.log(`Leaving match room: ${matchId}`);\n    \n    if (socketRef.current) {\n      socketRef.current.emit('leave-match', { matchId });\n    }\n    \n    // Update both the ref and the state\n    joinedMatchesRef.current = joinedMatchesRef.current.filter(id => id !== matchId);\n    setJoinedMatches(prevMatches => prevMatches.filter(id => id !== matchId));\n  };\n\n  // Socket context value - memoize to avoid unnecessary re-renders\n  const contextValue = React.useMemo(() => ({\n    socket,\n    isConnected,\n    joinMatch,\n    leaveMatch,\n    // Event subscription helpers\n    subscribeToEvent: (event, callback) => {\n      if (socketRef.current) {\n        socketRef.current.on(event, callback);\n        return () => socketRef.current?.off(event, callback);\n      }\n      return () => {};\n    },\n    emitEvent: (event, data) => {\n      if (socketRef.current) {\n        socketRef.current.emit(event, data);\n      }\n    }\n  }), [socket, isConnected]); // Only depend on these two state variables\n\n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Custom hook to use the socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    console.warn('useSocket must be used within a SocketProvider');\n    // Return mock implementation to prevent errors\n    return {\n      socket: null,\n      isConnected: false,\n      joinMatch: () => {},\n      leaveMatch: () => {},\n      subscribeToEvent: () => () => {},\n      emitEvent: () => {}\n    };\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}