{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emil\\\\OneDrive\\\\Documents\\\\development\\\\apiDevelopment\\\\pubg-tournament-tracker\\\\client\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n// Create the socket context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\n\n// Socket provider component\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [joinedMatches, setJoinedMatches] = useState([]);\n\n  // Initialize socket connection\n  useEffect(() => {\n    // Get base URL from environment or use default\n    const baseUrl = process.env.REACT_APP_SOCKET_URL || window.location.origin;\n\n    // Create socket instance\n    const socketInstance = io(baseUrl, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n\n    // Socket event handlers\n    socketInstance.on('connect', () => {\n      console.log('Socket connected');\n      setIsConnected(true);\n\n      // Rejoin any previously joined match rooms\n      joinedMatches.forEach(matchId => {\n        socketInstance.emit('join-match', {\n          matchId\n        });\n      });\n    });\n    socketInstance.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n    socketInstance.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n    });\n\n    // Save socket instance\n    setSocket(socketInstance);\n\n    // Cleanup on unmount\n    return () => {\n      if (socketInstance) {\n        console.log('Disconnecting socket');\n        socketInstance.disconnect();\n      }\n    };\n  }, [joinedMatches]);\n\n  // Join a match room to receive updates\n  const joinMatch = matchId => {\n    if (!matchId) return;\n    console.log(`Joining match room: ${matchId}`);\n    if (socket) {\n      socket.emit('join-match', {\n        matchId\n      });\n    }\n\n    // Track joined matches for reconnection\n    if (!joinedMatches.includes(matchId)) {\n      setJoinedMatches([...joinedMatches, matchId]);\n    }\n  };\n\n  // Leave a match room\n  const leaveMatch = matchId => {\n    if (!matchId) return;\n    console.log(`Leaving match room: ${matchId}`);\n    if (socket) {\n      socket.emit('leave-match', {\n        matchId\n      });\n    }\n\n    // Update joined matches list\n    setJoinedMatches(joinedMatches.filter(id => id !== matchId));\n  };\n\n  // Socket context value\n  const contextValue = {\n    socket,\n    isConnected,\n    joinMatch,\n    leaveMatch,\n    // Event subscription helpers\n    subscribeToEvent: (event, callback) => {\n      if (socket) {\n        socket.on(event, callback);\n        return () => socket.off(event, callback);\n      }\n      return () => {};\n    },\n    emitEvent: (event, data) => {\n      if (socket) {\n        socket.emit(event, data);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the socket context\n_s(SocketProvider, \"wgJLy01xidiPySej7FxcYBZA72s=\");\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    console.warn('useSocket must be used within a SocketProvider');\n    // Return mock implementation to prevent errors\n    return {\n      socket: null,\n      isConnected: false,\n      joinMatch: () => {},\n      leaveMatch: () => {},\n      subscribeToEvent: () => () => {},\n      emitEvent: () => {}\n    };\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","isConnected","setIsConnected","joinedMatches","setJoinedMatches","baseUrl","process","env","REACT_APP_SOCKET_URL","window","location","origin","socketInstance","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","console","log","forEach","matchId","emit","error","disconnect","joinMatch","includes","leaveMatch","filter","id","contextValue","subscribeToEvent","event","callback","off","emitEvent","data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","warn","$RefreshReg$"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n// Create the socket context\nconst SocketContext = createContext();\n\n// Socket provider component\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [joinedMatches, setJoinedMatches] = useState([]);\n\n  // Initialize socket connection\n  useEffect(() => {\n    // Get base URL from environment or use default\n    const baseUrl = process.env.REACT_APP_SOCKET_URL || window.location.origin;\n    \n    // Create socket instance\n    const socketInstance = io(baseUrl, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n\n    // Socket event handlers\n    socketInstance.on('connect', () => {\n      console.log('Socket connected');\n      setIsConnected(true);\n      \n      // Rejoin any previously joined match rooms\n      joinedMatches.forEach(matchId => {\n        socketInstance.emit('join-match', { matchId });\n      });\n    });\n\n    socketInstance.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n\n    socketInstance.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n    });\n\n    // Save socket instance\n    setSocket(socketInstance);\n\n    // Cleanup on unmount\n    return () => {\n      if (socketInstance) {\n        console.log('Disconnecting socket');\n        socketInstance.disconnect();\n      }\n    };\n  }, [joinedMatches]);\n\n  // Join a match room to receive updates\n  const joinMatch = (matchId) => {\n    if (!matchId) return;\n    \n    console.log(`Joining match room: ${matchId}`);\n    \n    if (socket) {\n      socket.emit('join-match', { matchId });\n    }\n    \n    // Track joined matches for reconnection\n    if (!joinedMatches.includes(matchId)) {\n      setJoinedMatches([...joinedMatches, matchId]);\n    }\n  };\n\n  // Leave a match room\n  const leaveMatch = (matchId) => {\n    if (!matchId) return;\n    \n    console.log(`Leaving match room: ${matchId}`);\n    \n    if (socket) {\n      socket.emit('leave-match', { matchId });\n    }\n    \n    // Update joined matches list\n    setJoinedMatches(joinedMatches.filter(id => id !== matchId));\n  };\n\n  // Socket context value\n  const contextValue = {\n    socket,\n    isConnected,\n    joinMatch,\n    leaveMatch,\n    // Event subscription helpers\n    subscribeToEvent: (event, callback) => {\n      if (socket) {\n        socket.on(event, callback);\n        return () => socket.off(event, callback);\n      }\n      return () => {};\n    },\n    emitEvent: (event, data) => {\n      if (socket) {\n        socket.emit(event, data);\n      }\n    }\n  };\n\n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Custom hook to use the socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    console.warn('useSocket must be used within a SocketProvider');\n    // Return mock implementation to prevent errors\n    return {\n      socket: null,\n      isConnected: false,\n      joinMatch: () => {},\n      leaveMatch: () => {},\n      subscribeToEvent: () => () => {},\n      emitEvent: () => {}\n    };\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}