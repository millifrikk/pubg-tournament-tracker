{"ast":null,"code":"import axios from 'axios';\nimport authService from './authService';\n\n/**\n * Service for team-related API calls\n */\nconst teamService = {\n  /**\n   * Get all teams\n   * @param {Object} options - Query options\n   * @returns {Promise} Promise with teams data\n   */\n  async getTeams(options = {}) {\n    const {\n      limit = 20,\n      offset = 0,\n      search\n    } = options;\n    let query = `/api/teams?limit=${limit}&offset=${offset}`;\n    if (search) query += `&search=${encodeURIComponent(search)}`;\n    const response = await axios.get(query);\n    return response.data;\n  },\n  /**\n   * Get team by ID\n   * @param {string} id - Team ID\n   * @returns {Promise} Promise with team data\n   */\n  async getTeam(id) {\n    const response = await axios.get(`/api/teams/${id}`);\n    return response.data;\n  },\n  /**\n   * Create new team\n   * @param {Object} teamData - Team data\n   * @returns {Promise} Promise with created team\n   */\n  async createTeam(teamData) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    console.log('Creating team with token:', token);\n    try {\n      const response = await axios.post('/api/teams', teamData, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Team creation error:', error.response ? error.response.data : error.message);\n      throw error;\n    }\n  },\n  /**\n   * Update team\n   * @param {string} id - Team ID\n   * @param {Object} teamData - Team data to update\n   * @returns {Promise} Promise with updated team\n   */\n  async updateTeam(id, teamData) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.put(`/api/teams/${id}`, teamData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Delete team\n   * @param {string} id - Team ID\n   * @returns {Promise} Promise with response data\n   */\n  async deleteTeam(id) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.delete(`/api/teams/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Get team players\n   * @param {string} id - Team ID\n   * @returns {Promise} Promise with team players\n   */\n  async getTeamPlayers(id) {\n    const response = await axios.get(`/api/teams/${id}/players`);\n    return response.data;\n  },\n  /**\n   * Add players to team\n   * @param {string} id - Team ID\n   * @param {Array} players - Array of player objects\n   * @returns {Promise} Promise with response data\n   */\n  async addPlayersToTeam(id, players) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.post(`/api/teams/${id}/players`, {\n      players\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Remove player from team\n   * @param {string} id - Team ID\n   * @param {string} playerId - Player ID to remove\n   * @returns {Promise} Promise with response data\n   */\n  async removePlayerFromTeam(id, playerId) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.delete(`/api/teams/${id}/players/${playerId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Search players by PUBG name\n   * @param {string} query - Search query\n   * @param {string} platform - PUBG platform (default: 'steam')\n   * @returns {Promise} Promise with search results\n   */\n  async searchPlayers(query, platform = 'steam') {\n    if (!query || query.length < 3) {\n      throw new Error('Search query must be at least 3 characters');\n    }\n    const response = await axios.get(`/api/players/search?query=${encodeURIComponent(query)}&platform=${platform}`);\n    return response.data;\n  }\n};\nexport default teamService;","map":{"version":3,"names":["axios","authService","teamService","getTeams","options","limit","offset","search","query","encodeURIComponent","response","get","data","getTeam","id","createTeam","teamData","token","getToken","Error","console","log","post","headers","error","message","updateTeam","put","deleteTeam","delete","getTeamPlayers","addPlayersToTeam","players","removePlayerFromTeam","playerId","searchPlayers","platform","length"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/teamService.js"],"sourcesContent":["import axios from 'axios';\nimport authService from './authService';\n\n/**\n * Service for team-related API calls\n */\nconst teamService = {\n  /**\n   * Get all teams\n   * @param {Object} options - Query options\n   * @returns {Promise} Promise with teams data\n   */\n  async getTeams(options = {}) {\n    const { limit = 20, offset = 0, search } = options;\n    \n    let query = `/api/teams?limit=${limit}&offset=${offset}`;\n    if (search) query += `&search=${encodeURIComponent(search)}`;\n    \n    const response = await axios.get(query);\n    return response.data;\n  },\n  \n  /**\n   * Get team by ID\n   * @param {string} id - Team ID\n   * @returns {Promise} Promise with team data\n   */\n  async getTeam(id) {\n    const response = await axios.get(`/api/teams/${id}`);\n    return response.data;\n  },\n  \n  /**\n   * Create new team\n   * @param {Object} teamData - Team data\n   * @returns {Promise} Promise with created team\n   */\n  async createTeam(teamData) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    console.log('Creating team with token:', token);\n    \n    try {\n      const response = await axios.post('/api/teams', teamData, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Team creation error:', error.response ? error.response.data : error.message);\n      throw error;\n    }\n  },\n  \n  /**\n   * Update team\n   * @param {string} id - Team ID\n   * @param {Object} teamData - Team data to update\n   * @returns {Promise} Promise with updated team\n   */\n  async updateTeam(id, teamData) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.put(`/api/teams/${id}`, teamData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Delete team\n   * @param {string} id - Team ID\n   * @returns {Promise} Promise with response data\n   */\n  async deleteTeam(id) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.delete(`/api/teams/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Get team players\n   * @param {string} id - Team ID\n   * @returns {Promise} Promise with team players\n   */\n  async getTeamPlayers(id) {\n    const response = await axios.get(`/api/teams/${id}/players`);\n    return response.data;\n  },\n  \n  /**\n   * Add players to team\n   * @param {string} id - Team ID\n   * @param {Array} players - Array of player objects\n   * @returns {Promise} Promise with response data\n   */\n  async addPlayersToTeam(id, players) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.post(`/api/teams/${id}/players`, \n      { players },\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    );\n    \n    return response.data;\n  },\n  \n  /**\n   * Remove player from team\n   * @param {string} id - Team ID\n   * @param {string} playerId - Player ID to remove\n   * @returns {Promise} Promise with response data\n   */\n  async removePlayerFromTeam(id, playerId) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.delete(`/api/teams/${id}/players/${playerId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Search players by PUBG name\n   * @param {string} query - Search query\n   * @param {string} platform - PUBG platform (default: 'steam')\n   * @returns {Promise} Promise with search results\n   */\n  async searchPlayers(query, platform = 'steam') {\n    if (!query || query.length < 3) {\n      throw new Error('Search query must be at least 3 characters');\n    }\n    \n    const response = await axios.get(`/api/players/search?query=${encodeURIComponent(query)}&platform=${platform}`);\n    return response.data;\n  }\n};\n\nexport default teamService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}