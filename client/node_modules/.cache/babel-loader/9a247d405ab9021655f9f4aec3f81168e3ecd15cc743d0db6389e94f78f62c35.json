{"ast":null,"code":"// client/src/services/authService.js\n\nconst TOKEN_KEY = 'token'; // Make sure this is consistent across all files\n\nclass AuthService {\n  // Login user and store token\n  async login(credentials) {\n    try {\n      console.log('AuthService login called with:', credentials);\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Login response error:', errorData);\n        throw new Error(errorData.error || 'Login failed');\n      }\n      const data = await response.json();\n      console.log('Login successful, received data:', data);\n      if (!data.token) {\n        console.error('No token received in login response');\n        throw new Error('No authentication token received');\n      }\n      this.setToken(data.token);\n      return data;\n    } catch (error) {\n      console.error('Login error in AuthService:', error);\n      throw error;\n    }\n  }\n\n  // Set token in localStorage\n  setToken(token) {\n    if (token) {\n      console.log('Setting token in localStorage');\n      localStorage.setItem(TOKEN_KEY, token);\n\n      // If using fetch, we don't need to set default headers here\n      // Each request will get the token from localStorage as needed\n    }\n  }\n\n  // Get token from localStorage\n  getToken() {\n    const token = localStorage.getItem(TOKEN_KEY);\n    return token;\n  }\n\n  // Get auth header value\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return {\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    return {};\n  }\n\n  // Check if user is logged in\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  // Logout user\n  logout() {\n    console.log('Removing token from localStorage');\n    localStorage.removeItem(TOKEN_KEY);\n  }\n\n  // Refresh token\n  async refreshToken() {\n    const currentToken = this.getToken();\n    if (!currentToken) {\n      throw new Error('No token to refresh');\n    }\n    try {\n      const response = await fetch('/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${currentToken}`\n        },\n        body: JSON.stringify({\n          token: currentToken\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to refresh token');\n      }\n      const data = await response.json();\n      this.setToken(data.token);\n      return data.token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      this.logout();\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["TOKEN_KEY","AuthService","login","credentials","console","log","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","error","Error","data","token","setToken","localStorage","setItem","getToken","getItem","getAuthHeader","isLoggedIn","logout","removeItem","refreshToken","currentToken"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/authService.js"],"sourcesContent":["// client/src/services/authService.js\n\nconst TOKEN_KEY = 'token'; // Make sure this is consistent across all files\n\nclass AuthService {\n  // Login user and store token\n  async login(credentials) {\n    try {\n      console.log('AuthService login called with:', credentials);\n      \n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Login response error:', errorData);\n        throw new Error(errorData.error || 'Login failed');\n      }\n      \n      const data = await response.json();\n      console.log('Login successful, received data:', data);\n      \n      if (!data.token) {\n        console.error('No token received in login response');\n        throw new Error('No authentication token received');\n      }\n      \n      this.setToken(data.token);\n      return data;\n    } catch (error) {\n      console.error('Login error in AuthService:', error);\n      throw error;\n    }\n  }\n  \n  // Set token in localStorage\n  setToken(token) {\n    if (token) {\n      console.log('Setting token in localStorage');\n      localStorage.setItem(TOKEN_KEY, token);\n      \n      // If using fetch, we don't need to set default headers here\n      // Each request will get the token from localStorage as needed\n    }\n  }\n  \n  // Get token from localStorage\n  getToken() {\n    const token = localStorage.getItem(TOKEN_KEY);\n    return token;\n  }\n  \n  // Get auth header value\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return { 'Authorization': `Bearer ${token}` };\n    }\n    return {};\n  }\n  \n  // Check if user is logged in\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  \n  // Logout user\n  logout() {\n    console.log('Removing token from localStorage');\n    localStorage.removeItem(TOKEN_KEY);\n  }\n  \n  // Refresh token\n  async refreshToken() {\n    const currentToken = this.getToken();\n    if (!currentToken) {\n      throw new Error('No token to refresh');\n    }\n    \n    try {\n      const response = await fetch('/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${currentToken}`\n        },\n        body: JSON.stringify({ token: currentToken })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to refresh token');\n      }\n      \n      const data = await response.json();\n      this.setToken(data.token);\n      return data.token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      this.logout();\n      throw error;\n    }\n  }\n}\n\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}