{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emil\\\\OneDrive\\\\Documents\\\\development\\\\apiDevelopment\\\\pubg-tournament-tracker\\\\client\\\\src\\\\pages\\\\matches\\\\MatchSearchRouter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MatchSearch from './MatchSearch';\nimport SimpleMatchSearch from './SimpleMatchSearch';\nimport matchesServiceEnhanced from '../../services/matchesServiceEnhanced';\nimport '../../styles/toggle-switch.css';\n\n/**\n * Router component that allows switching between standard and enhanced match search modes\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchSearchRouter = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n\n  // Check if the user has requested the enhanced mode\n  const [useEnhancedMode, setUseEnhancedMode] = useState(queryParams.get('mode') === 'enhanced' || localStorage.getItem('preferEnhancedMatchSearch') === 'true');\n\n  // Update the URL when the mode changes\n  useEffect(() => {\n    // Save preference to localStorage\n    localStorage.setItem('preferEnhancedMatchSearch', useEnhancedMode.toString());\n\n    // Update URL without causing a page reload\n    const newParams = new URLSearchParams(location.search);\n    if (useEnhancedMode) {\n      newParams.set('mode', 'enhanced');\n    } else {\n      newParams.delete('mode');\n    }\n\n    // Only update URL if needed\n    if (newParams.toString() !== queryParams.toString()) {\n      navigate({\n        search: newParams.toString()\n      }, {\n        replace: true\n      });\n    }\n  }, [useEnhancedMode, location.search, navigate]);\n\n  // Handle toggle change\n  const handleModeToggle = () => {\n    setUseEnhancedMode(!useEnhancedMode);\n  };\n\n  // Create props to pass to components with enhanced service\n  const enhancedProps = {\n    matchesService: matchesServiceEnhanced\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-toggle-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"mode-toggle\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `toggle-label ${!useEnhancedMode ? 'active' : ''}`,\n          children: \"Standard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: useEnhancedMode,\n            onChange: handleModeToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `toggle-label ${useEnhancedMode ? 'active' : ''}`,\n          children: \"Enhanced\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mode-info\",\n        children: useEnhancedMode ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Enhanced mode uses better error handling and retry logic to prevent connection issues\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Standard mode connects directly to the PUBG API with basic error handling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), useEnhancedMode ? /*#__PURE__*/_jsxDEV(SimpleMatchSearch, {\n      ...enhancedProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MatchSearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchSearchRouter, \"BJDxoIMbrBpro3B05Jj7KP+ailw=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = MatchSearchRouter;\nexport default MatchSearchRouter;\nvar _c;\n$RefreshReg$(_c, \"MatchSearchRouter\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","MatchSearch","SimpleMatchSearch","matchesServiceEnhanced","jsxDEV","_jsxDEV","MatchSearchRouter","_s","location","navigate","queryParams","URLSearchParams","search","useEnhancedMode","setUseEnhancedMode","get","localStorage","getItem","setItem","toString","newParams","set","delete","replace","handleModeToggle","enhancedProps","matchesService","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/pages/matches/MatchSearchRouter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MatchSearch from './MatchSearch';\nimport SimpleMatchSearch from './SimpleMatchSearch';\nimport matchesServiceEnhanced from '../../services/matchesServiceEnhanced';\nimport '../../styles/toggle-switch.css';\n\n/**\n * Router component that allows switching between standard and enhanced match search modes\n */\nconst MatchSearchRouter = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n  \n  // Check if the user has requested the enhanced mode\n  const [useEnhancedMode, setUseEnhancedMode] = useState(\n    queryParams.get('mode') === 'enhanced' || \n    localStorage.getItem('preferEnhancedMatchSearch') === 'true'\n  );\n  \n  // Update the URL when the mode changes\n  useEffect(() => {\n    // Save preference to localStorage\n    localStorage.setItem('preferEnhancedMatchSearch', useEnhancedMode.toString());\n    \n    // Update URL without causing a page reload\n    const newParams = new URLSearchParams(location.search);\n    if (useEnhancedMode) {\n      newParams.set('mode', 'enhanced');\n    } else {\n      newParams.delete('mode');\n    }\n    \n    // Only update URL if needed\n    if (newParams.toString() !== queryParams.toString()) {\n      navigate({ search: newParams.toString() }, { replace: true });\n    }\n  }, [useEnhancedMode, location.search, navigate]);\n  \n  // Handle toggle change\n  const handleModeToggle = () => {\n    setUseEnhancedMode(!useEnhancedMode);\n  };\n  \n  // Create props to pass to components with enhanced service\n  const enhancedProps = {\n    matchesService: matchesServiceEnhanced\n  };\n  \n  return (\n    <div>\n      <div className=\"mode-toggle-container\">\n        <label className=\"mode-toggle\">\n          <span className={`toggle-label ${!useEnhancedMode ? 'active' : ''}`}>Standard</span>\n          <div className=\"toggle-switch\">\n            <input\n              type=\"checkbox\"\n              checked={useEnhancedMode}\n              onChange={handleModeToggle}\n            />\n            <span className=\"slider round\"></span>\n          </div>\n          <span className={`toggle-label ${useEnhancedMode ? 'active' : ''}`}>Enhanced</span>\n        </label>\n        <div className=\"mode-info\">\n          {useEnhancedMode ? (\n            <p>Enhanced mode uses better error handling and retry logic to prevent connection issues</p>\n          ) : (\n            <p>Standard mode connects directly to the PUBG API with basic error handling</p>\n          )}\n        </div>\n      </div>\n      \n      {useEnhancedMode ? \n        <SimpleMatchSearch {...enhancedProps} /> : \n        <MatchSearch />\n      }\n    </div>\n  );\n};\n\nexport default MatchSearchRouter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}