{"ast":null,"code":"// client/src/services/tournamentApi.js\nimport api from'./api';// Base URL for tournament endpoints\nconst BASE_URL='/api/tournaments';// Tournament API service\nconst tournamentApi={// Get all tournaments\ngetAllTournaments:()=>{return api.get(BASE_URL);},// Get tournament by ID\ngetTournament:id=>{return api.get(`${BASE_URL}/${id}`);},// Create new tournament\ncreateTournament:tournamentData=>{return api.post(BASE_URL,tournamentData);},// Update tournament\nupdateTournament:(id,tournamentData)=>{return api.put(`${BASE_URL}/${id}`,tournamentData);},// Delete tournament\ndeleteTournament:id=>{return api.delete(`${BASE_URL}/${id}`);},// Get tournament matches\ngetTournamentMatches:id=>{return api.get(`${BASE_URL}/${id}/matches`);},// Add match to tournament\naddMatchToTournament:(tournamentId,matchId)=>{return api.post(`${BASE_URL}/${tournamentId}/matches`,{matchId});},// Remove match from tournament\nremoveMatchFromTournament:(tournamentId,matchId)=>{return api.delete(`${BASE_URL}/${tournamentId}/matches/${matchId}`);},// Get tournament teams\ngetTournamentTeams:id=>{return api.get(`${BASE_URL}/${id}/teams`);},// Add team to tournament\naddTeamToTournament:(tournamentId,teamId)=>{return api.post(`${BASE_URL}/${tournamentId}/teams`,{teamId});},// Remove team from tournament\nremoveTeamFromTournament:(tournamentId,teamId)=>{return api.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);},// Get tournament leaderboard\ngetTournamentLeaderboard:id=>{return api.get(`${BASE_URL}/${id}/leaderboard`);},// Join tournament (alias for addTeamToTournament)\njoinTournament:(tournamentId,teamId)=>{return api.post(`${BASE_URL}/${tournamentId}/teams`,{teamId});}};export default tournamentApi;","map":{"version":3,"names":["api","BASE_URL","tournamentApi","getAllTournaments","get","getTournament","id","createTournament","tournamentData","post","updateTournament","put","deleteTournament","delete","getTournamentMatches","addMatchToTournament","tournamentId","matchId","removeMatchFromTournament","getTournamentTeams","addTeamToTournament","teamId","removeTeamFromTournament","getTournamentLeaderboard","joinTournament"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/tournamentApi.js"],"sourcesContent":["// client/src/services/tournamentApi.js\n\nimport api from './api';\n\n// Base URL for tournament endpoints\nconst BASE_URL = '/api/tournaments';\n\n// Tournament API service\nconst tournamentApi = {\n  // Get all tournaments\n  getAllTournaments: () => {\n    return api.get(BASE_URL);\n  },\n  \n  // Get tournament by ID\n  getTournament: (id) => {\n    return api.get(`${BASE_URL}/${id}`);\n  },\n  \n  // Create new tournament\n  createTournament: (tournamentData) => {\n    return api.post(BASE_URL, tournamentData);\n  },\n  \n  // Update tournament\n  updateTournament: (id, tournamentData) => {\n    return api.put(`${BASE_URL}/${id}`, tournamentData);\n  },\n  \n  // Delete tournament\n  deleteTournament: (id) => {\n    return api.delete(`${BASE_URL}/${id}`);\n  },\n  \n  // Get tournament matches\n  getTournamentMatches: (id) => {\n    return api.get(`${BASE_URL}/${id}/matches`);\n  },\n  \n  // Add match to tournament\n  addMatchToTournament: (tournamentId, matchId) => {\n    return api.post(`${BASE_URL}/${tournamentId}/matches`, { matchId });\n  },\n  \n  // Remove match from tournament\n  removeMatchFromTournament: (tournamentId, matchId) => {\n    return api.delete(`${BASE_URL}/${tournamentId}/matches/${matchId}`);\n  },\n  \n  // Get tournament teams\n  getTournamentTeams: (id) => {\n    return api.get(`${BASE_URL}/${id}/teams`);\n  },\n  \n  // Add team to tournament\n  addTeamToTournament: (tournamentId, teamId) => {\n    return api.post(`${BASE_URL}/${tournamentId}/teams`, { teamId });\n  },\n  \n  // Remove team from tournament\n  removeTeamFromTournament: (tournamentId, teamId) => {\n    return api.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);\n  },\n  \n  // Get tournament leaderboard\n  getTournamentLeaderboard: (id) => {\n    return api.get(`${BASE_URL}/${id}/leaderboard`);\n  },\n  \n  // Join tournament (alias for addTeamToTournament)\n  joinTournament: (tournamentId, teamId) => {\n    return api.post(`${BASE_URL}/${tournamentId}/teams`, { teamId });\n  }\n};\n\nexport default tournamentApi;"],"mappings":"AAAA;AAEA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB;AACA,KAAM,CAAAC,QAAQ,CAAG,kBAAkB,CAEnC;AACA,KAAM,CAAAC,aAAa,CAAG,CACpB;AACAC,iBAAiB,CAAEA,CAAA,GAAM,CACvB,MAAO,CAAAH,GAAG,CAACI,GAAG,CAACH,QAAQ,CAAC,CAC1B,CAAC,CAED;AACAI,aAAa,CAAGC,EAAE,EAAK,CACrB,MAAO,CAAAN,GAAG,CAACI,GAAG,CAAC,GAAGH,QAAQ,IAAIK,EAAE,EAAE,CAAC,CACrC,CAAC,CAED;AACAC,gBAAgB,CAAGC,cAAc,EAAK,CACpC,MAAO,CAAAR,GAAG,CAACS,IAAI,CAACR,QAAQ,CAAEO,cAAc,CAAC,CAC3C,CAAC,CAED;AACAE,gBAAgB,CAAEA,CAACJ,EAAE,CAAEE,cAAc,GAAK,CACxC,MAAO,CAAAR,GAAG,CAACW,GAAG,CAAC,GAAGV,QAAQ,IAAIK,EAAE,EAAE,CAAEE,cAAc,CAAC,CACrD,CAAC,CAED;AACAI,gBAAgB,CAAGN,EAAE,EAAK,CACxB,MAAO,CAAAN,GAAG,CAACa,MAAM,CAAC,GAAGZ,QAAQ,IAAIK,EAAE,EAAE,CAAC,CACxC,CAAC,CAED;AACAQ,oBAAoB,CAAGR,EAAE,EAAK,CAC5B,MAAO,CAAAN,GAAG,CAACI,GAAG,CAAC,GAAGH,QAAQ,IAAIK,EAAE,UAAU,CAAC,CAC7C,CAAC,CAED;AACAS,oBAAoB,CAAEA,CAACC,YAAY,CAAEC,OAAO,GAAK,CAC/C,MAAO,CAAAjB,GAAG,CAACS,IAAI,CAAC,GAAGR,QAAQ,IAAIe,YAAY,UAAU,CAAE,CAAEC,OAAQ,CAAC,CAAC,CACrE,CAAC,CAED;AACAC,yBAAyB,CAAEA,CAACF,YAAY,CAAEC,OAAO,GAAK,CACpD,MAAO,CAAAjB,GAAG,CAACa,MAAM,CAAC,GAAGZ,QAAQ,IAAIe,YAAY,YAAYC,OAAO,EAAE,CAAC,CACrE,CAAC,CAED;AACAE,kBAAkB,CAAGb,EAAE,EAAK,CAC1B,MAAO,CAAAN,GAAG,CAACI,GAAG,CAAC,GAAGH,QAAQ,IAAIK,EAAE,QAAQ,CAAC,CAC3C,CAAC,CAED;AACAc,mBAAmB,CAAEA,CAACJ,YAAY,CAAEK,MAAM,GAAK,CAC7C,MAAO,CAAArB,GAAG,CAACS,IAAI,CAAC,GAAGR,QAAQ,IAAIe,YAAY,QAAQ,CAAE,CAAEK,MAAO,CAAC,CAAC,CAClE,CAAC,CAED;AACAC,wBAAwB,CAAEA,CAACN,YAAY,CAAEK,MAAM,GAAK,CAClD,MAAO,CAAArB,GAAG,CAACa,MAAM,CAAC,GAAGZ,QAAQ,IAAIe,YAAY,UAAUK,MAAM,EAAE,CAAC,CAClE,CAAC,CAED;AACAE,wBAAwB,CAAGjB,EAAE,EAAK,CAChC,MAAO,CAAAN,GAAG,CAACI,GAAG,CAAC,GAAGH,QAAQ,IAAIK,EAAE,cAAc,CAAC,CACjD,CAAC,CAED;AACAkB,cAAc,CAAEA,CAACR,YAAY,CAAEK,MAAM,GAAK,CACxC,MAAO,CAAArB,GAAG,CAACS,IAAI,CAAC,GAAGR,QAAQ,IAAIe,YAAY,QAAQ,CAAE,CAAEK,MAAO,CAAC,CAAC,CAClE,CACF,CAAC,CAED,cAAe,CAAAnB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}