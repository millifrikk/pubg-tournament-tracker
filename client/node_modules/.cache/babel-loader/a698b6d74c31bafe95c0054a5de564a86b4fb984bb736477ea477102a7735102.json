{"ast":null,"code":"// client/src/services/api.js\n// We'll get the token directly from localStorage to avoid circular dependency\nconsole.log('Initializing API service');// Base API class that handles requests with authentication\nclass ApiService{// Get request with auth\nasync get(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this.request('GET',url,null,options);}// Post request with auth\nasync post(url,data){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this.request('POST',url,data,options);}// Put request with auth\nasync put(url,data){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this.request('PUT',url,data,options);}// Delete request with auth\nasync delete(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this.request('DELETE',url,null,options);}// Universal request method\nasync request(method,url){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};try{// Get token directly from localStorage to avoid circular dependency\nconst token=localStorage.getItem('token');// Prepare headers\nconst headers={'Content-Type':'application/json',...options.headers};// Add auth header if token exists\nif(token){headers['Authorization']=`Bearer ${token}`;console.log('Adding auth header with token');}else{console.warn('No token available for request to '+url);// For requests to protected routes, this will likely fail\n// Add a more descriptive error message\nif(url.includes('/api/teams')||url.includes('/api/tournaments')){throw new Error('Authorization token missing. You may need to log in again.');}}// Log the request for debugging\nconsole.log(`API ${method} request to ${url}`);console.log('Headers:',headers);if(data)console.log('Data:',data);// Build request config\nconst config={method,headers,...options};// Add body for non-GET requests\nif(data&&method!=='GET'){config.body=JSON.stringify(data);}// Make the request\nconst response=await fetch(url,config);// Parse the JSON response\nconst responseData=await response.json();// Handle unsuccessful responses\nif(!response.ok){// Check for authentication errors\nif(response.status===401){console.error('Authentication error');// You might want to redirect to login page here\n// Remove token directly without using authService\nlocalStorage.removeItem('token');// Log authentication error for debugging\nconsole.log('Auth error detected, token removed');}// Log detailed error information\nconsole.error('API response error:',{status:response.status,statusText:response.statusText,responseData});throw new Error(responseData.error||responseData.details||`Request failed with status ${response.status}`);}return responseData;}catch(error){console.error(`API error (${method} ${url}):`,error);throw error;}}}export default new ApiService();","map":{"version":3,"names":["console","log","ApiService","get","url","options","arguments","length","undefined","request","post","data","put","delete","method","token","localStorage","getItem","headers","warn","includes","Error","config","body","JSON","stringify","response","fetch","responseData","json","ok","status","error","removeItem","statusText","details"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\n\n// We'll get the token directly from localStorage to avoid circular dependency\nconsole.log('Initializing API service')\n\n// Base API class that handles requests with authentication\nclass ApiService {\n  // Get request with auth\n  async get(url, options = {}) {\n    return this.request('GET', url, null, options);\n  }\n  \n  // Post request with auth\n  async post(url, data, options = {}) {\n    return this.request('POST', url, data, options);\n  }\n  \n  // Put request with auth\n  async put(url, data, options = {}) {\n    return this.request('PUT', url, data, options);\n  }\n  \n  // Delete request with auth\n  async delete(url, options = {}) {\n    return this.request('DELETE', url, null, options);\n  }\n  \n  // Universal request method\n  async request(method, url, data = null, options = {}) {\n    try {\n      // Get token directly from localStorage to avoid circular dependency\n      const token = localStorage.getItem('token');\n      \n      // Prepare headers\n      const headers = {\n        'Content-Type': 'application/json',\n        ...options.headers\n      };\n      \n      // Add auth header if token exists\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('Adding auth header with token');\n      } else {\n        console.warn('No token available for request to ' + url);\n        // For requests to protected routes, this will likely fail\n        // Add a more descriptive error message\n        if (url.includes('/api/teams') || url.includes('/api/tournaments')) {\n          throw new Error('Authorization token missing. You may need to log in again.');\n        }\n      }\n      \n      // Log the request for debugging\n      console.log(`API ${method} request to ${url}`);\n      console.log('Headers:', headers);\n      if (data) console.log('Data:', data);\n      \n      // Build request config\n      const config = {\n        method,\n        headers,\n        ...options\n      };\n      \n      // Add body for non-GET requests\n      if (data && method !== 'GET') {\n        config.body = JSON.stringify(data);\n      }\n      \n      // Make the request\n      const response = await fetch(url, config);\n      \n      // Parse the JSON response\n      const responseData = await response.json();\n      \n      // Handle unsuccessful responses\n      if (!response.ok) {\n        // Check for authentication errors\n        if (response.status === 401) {\n          console.error('Authentication error');\n          // You might want to redirect to login page here\n          // Remove token directly without using authService\n          localStorage.removeItem('token');\n          // Log authentication error for debugging\n          console.log('Auth error detected, token removed');\n        }\n        \n        // Log detailed error information\n        console.error('API response error:', {\n          status: response.status,\n          statusText: response.statusText,\n          responseData\n        });\n        \n        throw new Error(responseData.error || responseData.details || `Request failed with status ${response.status}`);\n      }\n      \n      return responseData;\n    } catch (error) {\n      console.error(`API error (${method} ${url}):`, error);\n      throw error;\n    }\n  }\n}\n\nexport default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}