{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to dynamically check for token before each request\napi.interceptors.request.use(config => {\n  // Get the latest token from localStorage on each request\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    // Log the token being used (for debugging purposes)\n    console.log('Using auth token for request:', config.url);\n  } else {\n    // Log missing token (for debugging purposes)\n    console.log('No auth token available for request:', config.url);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for handling errors\napi.interceptors.response.use(response => response, error => {\n  // Handle specific error cases\n  if (error.response) {\n    // The request was made and the server responded with a non-2xx status\n    const {\n      status,\n      data\n    } = error.response;\n\n    // Enhanced error logging\n    console.error(`API Error ${status}:`, {\n      url: error.config.url,\n      method: error.config.method,\n      data: error.config.data,\n      response: data\n    });\n\n    // Handle authentication errors\n    if (status === 401) {\n      // If token refresh fails or user is not authenticated\n      if (error.config.url !== '/auth/refresh' && error.config.url !== '/auth/login') {\n        console.warn('Authentication error detected, redirecting to login');\n\n        // Remove token\n        localStorage.removeItem('token');\n        localStorage.removeItem('pubg_tracker_user_data');\n\n        // Show notification to user\n        if (window.showToast) {\n          window.showToast('Your session has expired. Please log in again.', 'error');\n        }\n\n        // Don't redirect if we're already on the login page\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      }\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Player API\nexport const playerApi = {\n  searchPlayer: (name, platform = 'steam') => api.get(`/players/search?name=${name}&platform=${platform}`),\n  getPlayerById: (id, platform = 'steam') => api.get(`/players/${id}?platform=${platform}`),\n  getPlayerMatches: (id, platform = 'steam', limit = 10) => api.get(`/players/${id}/matches?platform=${platform}&limit=${limit}`),\n  getPlayerSeasonStats: (id, seasonId, platform = 'steam') => api.get(`/players/${id}/season/${seasonId}?platform=${platform}`)\n};\n\n// Match API\nexport const matchApi = {\n  getMatch: (id, platform = 'steam') => api.get(`/matches/${id}?platform=${platform}`),\n  getTelemetry: (id, platform = 'steam') => api.get(`/matches/${id}/telemetry?platform=${platform}`),\n  searchMatches: criteria => api.post('/matches/search', criteria),\n  registerMatch: matchData => api.post('/matches/register', matchData)\n};\n\n// Tournament API\nexport const tournamentApi = {\n  getAllTournaments: (params = {}) => api.get('/tournaments', {\n    params\n  }),\n  getTournamentById: id => api.get(`/tournaments/${id}`),\n  createTournament: tournamentData => api.post('/tournaments', tournamentData),\n  updateTournament: (id, tournamentData) => api.put(`/tournaments/${id}`, tournamentData),\n  deleteTournament: id => api.delete(`/tournaments/${id}`),\n  getTournamentMatches: (id, platform = 'steam') => api.get(`/tournaments/${id}/matches?platform=${platform}`),\n  addMatchesToTournament: (id, matchIds, stage = 'group') => api.post(`/tournaments/${id}/matches`, {\n    matchIds,\n    stage\n  }),\n  removeMatchFromTournament: (id, matchId) => api.delete(`/tournaments/${id}/matches/${matchId}`),\n  calculateStandings: (id, platform = 'steam') => api.post(`/tournaments/${id}/calculate-standings`, {\n    platform\n  })\n};\n\n// Team API\nexport const teamApi = {\n  getAllTeams: (params = {}) => api.get('/teams', {\n    params\n  }),\n  getTeamById: id => api.get(`/teams/${id}`),\n  createTeam: teamData => api.post('/teams', teamData),\n  updateTeam: (id, teamData) => api.put(`/teams/${id}`, teamData),\n  deleteTeam: id => api.delete(`/teams/${id}`),\n  addPlayersToTeam: (id, players) => api.post(`/teams/${id}/players`, {\n    players\n  }),\n  removePlayerFromTeam: (id, playerId) => api.delete(`/teams/${id}/players/${playerId}`)\n};\n\n// Auth API\nexport const authApi = {\n  login: (usernameOrEmail, password) => api.post('/auth/login', {\n    usernameOrEmail,\n    password\n  }),\n  register: userData => api.post('/auth/register', userData),\n  getCurrentUser: () => api.get('/auth/me'),\n  refreshToken: token => api.post('/auth/refresh', {\n    token\n  })\n};\n\n// Export the api instance as default\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","console","log","url","error","Promise","reject","response","status","data","method","warn","removeItem","window","showToast","location","pathname","href","playerApi","searchPlayer","name","platform","get","getPlayerById","id","getPlayerMatches","limit","getPlayerSeasonStats","seasonId","matchApi","getMatch","getTelemetry","searchMatches","criteria","post","registerMatch","matchData","tournamentApi","getAllTournaments","params","getTournamentById","createTournament","tournamentData","updateTournament","put","deleteTournament","delete","getTournamentMatches","addMatchesToTournament","matchIds","stage","removeMatchFromTournament","matchId","calculateStandings","teamApi","getAllTeams","getTeamById","createTeam","teamData","updateTeam","deleteTeam","addPlayersToTeam","players","removePlayerFromTeam","playerId","authApi","login","usernameOrEmail","password","register","userData","getCurrentUser","refreshToken"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to dynamically check for token before each request\napi.interceptors.request.use(config => {\n  // Get the latest token from localStorage on each request\n  const token = localStorage.getItem('token');\n  \n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    // Log the token being used (for debugging purposes)\n    console.log('Using auth token for request:', config.url);\n  } else {\n    // Log missing token (for debugging purposes)\n    console.log('No auth token available for request:', config.url);\n  }\n  \n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for handling errors\napi.interceptors.response.use(\n  response => response,\n  error => {\n    // Handle specific error cases\n    if (error.response) {\n      // The request was made and the server responded with a non-2xx status\n      const { status, data } = error.response;\n      \n      // Enhanced error logging\n      console.error(`API Error ${status}:`, {\n        url: error.config.url,\n        method: error.config.method,\n        data: error.config.data,\n        response: data\n      });\n      \n      // Handle authentication errors\n      if (status === 401) {\n        // If token refresh fails or user is not authenticated\n        if (error.config.url !== '/auth/refresh' && error.config.url !== '/auth/login') {\n          console.warn('Authentication error detected, redirecting to login');\n          \n          // Remove token\n          localStorage.removeItem('token');\n          localStorage.removeItem('pubg_tracker_user_data');\n          \n          // Show notification to user\n          if (window.showToast) {\n            window.showToast('Your session has expired. Please log in again.', 'error');\n          }\n          \n          // Don't redirect if we're already on the login page\n          if (window.location.pathname !== '/login') {\n            window.location.href = '/login';\n          }\n        }\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Player API\nexport const playerApi = {\n  searchPlayer: (name, platform = 'steam') => \n    api.get(`/players/search?name=${name}&platform=${platform}`),\n  \n  getPlayerById: (id, platform = 'steam') => \n    api.get(`/players/${id}?platform=${platform}`),\n  \n  getPlayerMatches: (id, platform = 'steam', limit = 10) => \n    api.get(`/players/${id}/matches?platform=${platform}&limit=${limit}`),\n  \n  getPlayerSeasonStats: (id, seasonId, platform = 'steam') => \n    api.get(`/players/${id}/season/${seasonId}?platform=${platform}`)\n};\n\n// Match API\nexport const matchApi = {\n  getMatch: (id, platform = 'steam') => \n    api.get(`/matches/${id}?platform=${platform}`),\n  \n  getTelemetry: (id, platform = 'steam') => \n    api.get(`/matches/${id}/telemetry?platform=${platform}`),\n  \n  searchMatches: (criteria) => \n    api.post('/matches/search', criteria),\n  \n  registerMatch: (matchData) => \n    api.post('/matches/register', matchData)\n};\n\n// Tournament API\nexport const tournamentApi = {\n  getAllTournaments: (params = {}) => \n    api.get('/tournaments', { params }),\n  \n  getTournamentById: (id) => \n    api.get(`/tournaments/${id}`),\n  \n  createTournament: (tournamentData) => \n    api.post('/tournaments', tournamentData),\n  \n  updateTournament: (id, tournamentData) => \n    api.put(`/tournaments/${id}`, tournamentData),\n  \n  deleteTournament: (id) => \n    api.delete(`/tournaments/${id}`),\n  \n  getTournamentMatches: (id, platform = 'steam') => \n    api.get(`/tournaments/${id}/matches?platform=${platform}`),\n  \n  addMatchesToTournament: (id, matchIds, stage = 'group') => \n    api.post(`/tournaments/${id}/matches`, { matchIds, stage }),\n  \n  removeMatchFromTournament: (id, matchId) => \n    api.delete(`/tournaments/${id}/matches/${matchId}`),\n  \n  calculateStandings: (id, platform = 'steam') => \n    api.post(`/tournaments/${id}/calculate-standings`, { platform })\n};\n\n// Team API\nexport const teamApi = {\n  getAllTeams: (params = {}) => \n    api.get('/teams', { params }),\n  \n  getTeamById: (id) => \n    api.get(`/teams/${id}`),\n  \n  createTeam: (teamData) => \n    api.post('/teams', teamData),\n  \n  updateTeam: (id, teamData) => \n    api.put(`/teams/${id}`, teamData),\n  \n  deleteTeam: (id) => \n    api.delete(`/teams/${id}`),\n  \n  addPlayersToTeam: (id, players) => \n    api.post(`/teams/${id}/players`, { players }),\n  \n  removePlayerFromTeam: (id, playerId) => \n    api.delete(`/teams/${id}/players/${playerId}`)\n};\n\n// Auth API\nexport const authApi = {\n  login: (usernameOrEmail, password) => \n    api.post('/auth/login', { usernameOrEmail, password }),\n  \n  register: (userData) => \n    api.post('/auth/register', userData),\n  \n  getCurrentUser: () => \n    api.get('/auth/me'),\n  \n  refreshToken: (token) => \n    api.post('/auth/refresh', { token })\n};\n\n// Export the api instance as default\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}