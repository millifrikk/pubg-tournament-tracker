{"ast":null,"code":"import axios from 'axios';\nimport authService from './authService';\n\n// Create a service for handling match-related API calls\nconst matchesService = {\n  /**\n   * Get match details by ID\n   * @param {string} matchId - PUBG match ID\n   * @param {string} platform - Platform (default: steam)\n   * @returns {Promise<Object>} Match data\n   */\n  async getMatchDetails(matchId, platform = 'steam') {\n    try {\n      // Get auth token if available\n      const token = authService.getToken();\n\n      // Request headers\n      const headers = {};\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Make API request\n      const response = await axios.get(`/api/matches/${matchId}?platform=${platform}`, {\n        headers\n      });\n\n      // If response is empty or missing key attributes, throw an error\n      if (!response.data || !response.data.data) {\n        throw new Error('Invalid response format from API');\n      }\n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 404) {\n          throw new Error('Match not found');\n        } else if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          var _error$response$data;\n          throw new Error(`API error: ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  },\n  /**\n   * Get telemetry data for a match\n   * @param {string} matchId - PUBG match ID\n   * @param {string} platform - Platform (default: steam)\n   * @returns {Promise<Object>} Telemetry data\n   */\n  async getTelemetry(matchId, platform = 'steam') {\n    try {\n      // Get auth token if available\n      const token = authService.getToken();\n\n      // Request headers\n      const headers = {};\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Make API request\n      const response = await axios.get(`/api/matches/${matchId}/telemetry?platform=${platform}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 404) {\n          throw new Error('Telemetry data not found');\n        } else if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          var _error$response$data2;\n          throw new Error(`API error: ${((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  },\n  /**\n   * Search for matches based on criteria\n   * @param {Object} criteria - Search criteria\n   * @returns {Promise<Object>} Search results\n   */\n  async searchMatches(criteria) {\n    try {\n      // Get auth token if available\n      const token = authService.getToken();\n\n      // Request headers\n      const headers = {};\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Make API request\n      const response = await axios.post('/api/matches/search', criteria, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          var _error$response$data3;\n          throw new Error(`API error: ${((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.error) || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  },\n  /**\n   * Register a match to a tournament\n   * @param {Object} matchData - Match registration data\n   * @returns {Promise<Object>} Registration result\n   */\n  async registerMatch(matchData) {\n    try {\n      // Get auth token (required for this operation)\n      const token = authService.getToken();\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n\n      // Request headers\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n\n      // Make API request\n      const response = await axios.post('/api/matches/register', matchData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 404) {\n          throw new Error('Match not found');\n        } else if (error.response.status === 409) {\n          throw new Error('Match is already registered to a tournament');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          var _error$response$data4;\n          throw new Error(`API error: ${((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.error) || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  }\n};\nexport default matchesService;","map":{"version":3,"names":["axios","authService","matchesService","getMatchDetails","matchId","platform","token","getToken","headers","Authorization","response","get","data","Error","error","status","_error$response$data","request","getTelemetry","_error$response$data2","searchMatches","criteria","post","_error$response$data3","registerMatch","matchData","_error$response$data4"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/matchesService.js"],"sourcesContent":["import axios from 'axios';\nimport authService from './authService';\n\n// Create a service for handling match-related API calls\nconst matchesService = {\n  /**\n   * Get match details by ID\n   * @param {string} matchId - PUBG match ID\n   * @param {string} platform - Platform (default: steam)\n   * @returns {Promise<Object>} Match data\n   */\n  async getMatchDetails(matchId, platform = 'steam') {\n    try {\n      // Get auth token if available\n      const token = authService.getToken();\n      \n      // Request headers\n      const headers = {};\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Make API request\n      const response = await axios.get(`/api/matches/${matchId}?platform=${platform}`, { headers });\n      \n      // If response is empty or missing key attributes, throw an error\n      if (!response.data || !response.data.data) {\n        throw new Error('Invalid response format from API');\n      }\n      \n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 404) {\n          throw new Error('Match not found');\n        } else if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          throw new Error(`API error: ${error.response.data?.error || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  },\n  \n  /**\n   * Get telemetry data for a match\n   * @param {string} matchId - PUBG match ID\n   * @param {string} platform - Platform (default: steam)\n   * @returns {Promise<Object>} Telemetry data\n   */\n  async getTelemetry(matchId, platform = 'steam') {\n    try {\n      // Get auth token if available\n      const token = authService.getToken();\n      \n      // Request headers\n      const headers = {};\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Make API request\n      const response = await axios.get(`/api/matches/${matchId}/telemetry?platform=${platform}`, { headers });\n      \n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 404) {\n          throw new Error('Telemetry data not found');\n        } else if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          throw new Error(`API error: ${error.response.data?.error || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  },\n  \n  /**\n   * Search for matches based on criteria\n   * @param {Object} criteria - Search criteria\n   * @returns {Promise<Object>} Search results\n   */\n  async searchMatches(criteria) {\n    try {\n      // Get auth token if available\n      const token = authService.getToken();\n      \n      // Request headers\n      const headers = {};\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Make API request\n      const response = await axios.post('/api/matches/search', criteria, { headers });\n      \n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          throw new Error(`API error: ${error.response.data?.error || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  },\n  \n  /**\n   * Register a match to a tournament\n   * @param {Object} matchData - Match registration data\n   * @returns {Promise<Object>} Registration result\n   */\n  async registerMatch(matchData) {\n    try {\n      // Get auth token (required for this operation)\n      const token = authService.getToken();\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      // Request headers\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n\n      // Make API request\n      const response = await axios.post('/api/matches/register', matchData, { headers });\n      \n      return response.data;\n    } catch (error) {\n      // Handle specific error cases\n      if (error.response) {\n        // Server responded with an error status\n        if (error.response.status === 401) {\n          throw new Error('Authentication required');\n        } else if (error.response.status === 404) {\n          throw new Error('Match not found');\n        } else if (error.response.status === 409) {\n          throw new Error('Match is already registered to a tournament');\n        } else if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else {\n          throw new Error(`API error: ${error.response.data?.error || 'Unknown error'}`);\n        }\n      } else if (error.request) {\n        // No response received\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        // Something else went wrong\n        throw error;\n      }\n    }\n  }\n};\n\nexport default matchesService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}