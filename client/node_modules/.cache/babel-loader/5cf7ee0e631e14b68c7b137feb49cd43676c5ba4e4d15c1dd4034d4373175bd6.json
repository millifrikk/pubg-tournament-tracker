{"ast":null,"code":"// client/src/services/tournamentService.js\n\nimport apiService from './api';\nconst BASE_URL = '/api/tournaments';\nclass TournamentService {\n  // Get all tournaments\n  async getAllTournaments() {\n    return apiService.get(BASE_URL);\n  }\n\n  // Get tournament by ID\n  async getTournamentById(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}`);\n  }\n\n  // Create new tournament\n  async createTournament(tournamentData) {\n    console.log('Creating tournament with data:', tournamentData);\n\n    // Ensure all dates are properly formatted\n    const formattedData = {\n      ...tournamentData,\n      startDate: tournamentData.startDate instanceof Date ? tournamentData.startDate.toISOString() : tournamentData.startDate,\n      endDate: tournamentData.endDate instanceof Date ? tournamentData.endDate.toISOString() : tournamentData.endDate\n    };\n    console.log('Formatted data:', formattedData);\n    return apiService.post(BASE_URL, formattedData);\n  }\n\n  // Update tournament\n  async updateTournament(tournamentId, tournamentData) {\n    return apiService.put(`${BASE_URL}/${tournamentId}`, tournamentData);\n  }\n\n  // Delete tournament\n  async deleteTournament(tournamentId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}`);\n  }\n\n  // Get tournament teams\n  async getTournamentTeams(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/teams`);\n  }\n\n  // Add team to tournament\n  async addTeamToTournament(tournamentId, teamId) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/teams`, {\n      teamId\n    });\n  }\n\n  // Remove team from tournament\n  async removeTeamFromTournament(tournamentId, teamId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);\n  }\n\n  // Get tournament matches\n  async getTournamentMatches(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/matches`);\n  }\n\n  // Add match to tournament\n  async addMatchToTournament(tournamentId, matchData) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/matches`, matchData);\n  }\n\n  // Get tournament leaderboard\n  async getTournamentLeaderboard(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/leaderboard`);\n  }\n\n  // Join tournament (adding this missing function)\n  async joinTournament(tournamentId, teamId) {\n    console.log('Joining tournament:', tournamentId, 'with team:', teamId);\n    return this.addTeamToTournament(tournamentId, teamId);\n  }\n}\nexport default new TournamentService();","map":{"version":3,"names":["apiService","BASE_URL","TournamentService","getAllTournaments","get","getTournamentById","tournamentId","createTournament","tournamentData","console","log","formattedData","startDate","Date","toISOString","endDate","post","updateTournament","put","deleteTournament","delete","getTournamentTeams","addTeamToTournament","teamId","removeTeamFromTournament","getTournamentMatches","addMatchToTournament","matchData","getTournamentLeaderboard","joinTournament"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/tournamentService.js"],"sourcesContent":["// client/src/services/tournamentService.js\n\nimport apiService from './api';\n\nconst BASE_URL = '/api/tournaments';\n\nclass TournamentService {\n  // Get all tournaments\n  async getAllTournaments() {\n    return apiService.get(BASE_URL);\n  }\n  \n  // Get tournament by ID\n  async getTournamentById(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}`);\n  }\n  \n  // Create new tournament\n  async createTournament(tournamentData) {\n    console.log('Creating tournament with data:', tournamentData);\n    \n    // Ensure all dates are properly formatted\n    const formattedData = {\n      ...tournamentData,\n      startDate: tournamentData.startDate instanceof Date \n        ? tournamentData.startDate.toISOString() \n        : tournamentData.startDate,\n      endDate: tournamentData.endDate instanceof Date \n        ? tournamentData.endDate.toISOString() \n        : tournamentData.endDate\n    };\n    \n    console.log('Formatted data:', formattedData);\n    return apiService.post(BASE_URL, formattedData);\n  }\n  \n  // Update tournament\n  async updateTournament(tournamentId, tournamentData) {\n    return apiService.put(`${BASE_URL}/${tournamentId}`, tournamentData);\n  }\n  \n  // Delete tournament\n  async deleteTournament(tournamentId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}`);\n  }\n  \n  // Get tournament teams\n  async getTournamentTeams(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/teams`);\n  }\n  \n  // Add team to tournament\n  async addTeamToTournament(tournamentId, teamId) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/teams`, { teamId });\n  }\n  \n  // Remove team from tournament\n  async removeTeamFromTournament(tournamentId, teamId) {\n    return apiService.delete(`${BASE_URL}/${tournamentId}/teams/${teamId}`);\n  }\n  \n  // Get tournament matches\n  async getTournamentMatches(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/matches`);\n  }\n  \n  // Add match to tournament\n  async addMatchToTournament(tournamentId, matchData) {\n    return apiService.post(`${BASE_URL}/${tournamentId}/matches`, matchData);\n  }\n  \n  // Get tournament leaderboard\n  async getTournamentLeaderboard(tournamentId) {\n    return apiService.get(`${BASE_URL}/${tournamentId}/leaderboard`);\n  }\n  \n  // Join tournament (adding this missing function)\n  async joinTournament(tournamentId, teamId) {\n    console.log('Joining tournament:', tournamentId, 'with team:', teamId);\n    return this.addTeamToTournament(tournamentId, teamId);\n  }\n}\n\nexport default new TournamentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}