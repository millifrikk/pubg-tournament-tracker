{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emil\\\\OneDrive\\\\Documents\\\\development\\\\apiDevelopment\\\\pubg-tournament-tracker\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport authService from '../services/authService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on initial load\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const token = authService.getToken();\n        if (!token) {\n          setCurrentUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Check if token is expired\n        try {\n          const decoded = jwt_decode(token);\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            // Token is expired\n            logout();\n            return;\n          }\n\n          // Token is valid, get current user data\n          const response = await fetch('/api/auth/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          if (!response.ok) {\n            throw new Error('Failed to get user data');\n          }\n          const data = await response.json();\n          setCurrentUser(data.user);\n        } catch (error) {\n          console.error('Token validation error:', error);\n          logout();\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyToken();\n  }, []);\n\n  // Login function\n  const login = async (usernameOrEmail, password) => {\n    try {\n      const credentials = {\n        usernameOrEmail,\n        password\n      };\n      console.log('Attempting login with:', credentials);\n      const data = await authService.login(credentials);\n      console.log('Login successful:', data);\n      setCurrentUser(data.user);\n      return data.user;\n    } catch (error) {\n      console.error('Login error in AuthContext:', error);\n      throw error;\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      // Use fetch directly for registration to avoid circular dependencies\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n\n      // Save token and user data\n      authService.setToken(data.token);\n      setCurrentUser(data.user);\n      return data.user;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    authService.logout();\n    setCurrentUser(null);\n    navigate('/login');\n  };\n\n  // Define the context value\n  const value = {\n    currentUser,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"4XW06Xv3Wo+INaDFXZmN4cjHv/s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jwt_decode","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","navigate","verifyToken","token","getToken","decoded","currentTime","Date","now","exp","logout","response","fetch","headers","ok","Error","data","json","user","error","console","login","usernameOrEmail","password","credentials","log","register","userData","method","body","JSON","stringify","setToken","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport authService from '../services/authService';\n\n// Create context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  \n  // Check if user is already logged in on initial load\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const token = authService.getToken();\n        \n        if (!token) {\n          setCurrentUser(null);\n          setLoading(false);\n          return;\n        }\n        \n        // Check if token is expired\n        try {\n          const decoded = jwt_decode(token);\n          const currentTime = Date.now() / 1000;\n          \n          if (decoded.exp < currentTime) {\n            // Token is expired\n            logout();\n            return;\n          }\n          \n          // Token is valid, get current user data\n          const response = await fetch('/api/auth/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          if (!response.ok) {\n            throw new Error('Failed to get user data');\n          }\n          \n          const data = await response.json();\n          setCurrentUser(data.user);\n        } catch (error) {\n          console.error('Token validation error:', error);\n          logout();\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    verifyToken();\n  }, []);\n  \n  // Login function\n  const login = async (usernameOrEmail, password) => {\n    try {\n      const credentials = { usernameOrEmail, password };\n      console.log('Attempting login with:', credentials);\n      \n      const data = await authService.login(credentials);\n      console.log('Login successful:', data);\n      \n      setCurrentUser(data.user);\n      return data.user;\n    } catch (error) {\n      console.error('Login error in AuthContext:', error);\n      throw error;\n    }\n  };\n  \n  // Register function\n  const register = async (userData) => {\n    try {\n      // Use fetch directly for registration to avoid circular dependencies\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n      \n      // Save token and user data\n      authService.setToken(data.token);\n      setCurrentUser(data.user);\n      \n      return data.user;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  \n  // Logout function\n  const logout = () => {\n    authService.logout();\n    setCurrentUser(null);\n    navigate('/login');\n  };\n  \n  // Define the context value\n  const value = {\n    currentUser,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}