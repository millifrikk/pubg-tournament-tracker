{"ast":null,"code":"// client/src/services/authService.js\nconst TOKEN_KEY='token';// Make sure this is consistent across all files\nclass AuthService{// Login user and store token\nasync login(credentials){try{console.log('AuthService login called with:',credentials);const response=await fetch('/api/auth/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(credentials)});if(!response.ok){const errorData=await response.json();console.error('Login response error:',errorData);throw new Error(errorData.error||'Login failed');}const data=await response.json();console.log('Login successful, received data:',data);if(!data.token){console.error('No token received in login response');throw new Error('No authentication token received');}this.setToken(data.token);return data;}catch(error){console.error('Login error in AuthService:',error);throw error;}}// Set token in localStorage\nsetToken(token){if(token){console.log('Setting token in localStorage');localStorage.setItem(TOKEN_KEY,token);// If using fetch, we don't need to set default headers here\n// Each request will get the token from localStorage as needed\n}}// Get token from localStorage\ngetToken(){const token=localStorage.getItem(TOKEN_KEY);return token;}// Get auth header value\ngetAuthHeader(){const token=this.getToken();if(token){return{'Authorization':`Bearer ${token}`};}return{};}// Check if user is logged in\nisLoggedIn(){return!!this.getToken();}// Logout user\nlogout(){console.log('Removing token from localStorage');localStorage.removeItem(TOKEN_KEY);}// Refresh token\nasync refreshToken(){const currentToken=this.getToken();if(!currentToken){throw new Error('No token to refresh');}try{const response=await fetch('/api/auth/refresh',{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${currentToken}`},body:JSON.stringify({token:currentToken})});if(!response.ok){throw new Error('Failed to refresh token');}const data=await response.json();this.setToken(data.token);return data.token;}catch(error){console.error('Error refreshing token:',error);this.logout();throw error;}}}export default new AuthService();","map":{"version":3,"names":["TOKEN_KEY","AuthService","login","credentials","console","log","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","error","Error","data","token","setToken","localStorage","setItem","getToken","getItem","getAuthHeader","isLoggedIn","logout","removeItem","refreshToken","currentToken"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/authService.js"],"sourcesContent":["// client/src/services/authService.js\n\nconst TOKEN_KEY = 'token'; // Make sure this is consistent across all files\n\nclass AuthService {\n  // Login user and store token\n  async login(credentials) {\n    try {\n      console.log('AuthService login called with:', credentials);\n      \n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Login response error:', errorData);\n        throw new Error(errorData.error || 'Login failed');\n      }\n      \n      const data = await response.json();\n      console.log('Login successful, received data:', data);\n      \n      if (!data.token) {\n        console.error('No token received in login response');\n        throw new Error('No authentication token received');\n      }\n      \n      this.setToken(data.token);\n      return data;\n    } catch (error) {\n      console.error('Login error in AuthService:', error);\n      throw error;\n    }\n  }\n  \n  // Set token in localStorage\n  setToken(token) {\n    if (token) {\n      console.log('Setting token in localStorage');\n      localStorage.setItem(TOKEN_KEY, token);\n      \n      // If using fetch, we don't need to set default headers here\n      // Each request will get the token from localStorage as needed\n    }\n  }\n  \n  // Get token from localStorage\n  getToken() {\n    const token = localStorage.getItem(TOKEN_KEY);\n    return token;\n  }\n  \n  // Get auth header value\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return { 'Authorization': `Bearer ${token}` };\n    }\n    return {};\n  }\n  \n  // Check if user is logged in\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  \n  // Logout user\n  logout() {\n    console.log('Removing token from localStorage');\n    localStorage.removeItem(TOKEN_KEY);\n  }\n  \n  // Refresh token\n  async refreshToken() {\n    const currentToken = this.getToken();\n    if (!currentToken) {\n      throw new Error('No token to refresh');\n    }\n    \n    try {\n      const response = await fetch('/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${currentToken}`\n        },\n        body: JSON.stringify({ token: currentToken })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to refresh token');\n      }\n      \n      const data = await response.json();\n      this.setToken(data.token);\n      return data.token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      this.logout();\n      throw error;\n    }\n  }\n}\n\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}