{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import jwt_decode from'jwt-decode';import authService from'../services/authService';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Custom hook to use the auth context\nexport const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const navigate=useNavigate();// Check if user is already logged in on initial load\nuseEffect(()=>{const verifyToken=async()=>{try{const token=authService.getToken();if(!token){setCurrentUser(null);setLoading(false);return;}// Check if token is expired\ntry{const decoded=jwt_decode(token);const currentTime=Date.now()/1000;if(decoded.exp<currentTime){// Token is expired\nlogout();return;}// Token is valid, get current user data\nconsole.log('Token is valid, getting user data');const response=await fetch('/api/auth/me',{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});console.log('User data response status:',response.status);if(!response.ok){throw new Error('Failed to get user data');}const data=await response.json();setCurrentUser(data.user);}catch(error){console.error('Token validation error:',error);logout();}}finally{setLoading(false);}};verifyToken();},[]);// Login function\nconst login=async(usernameOrEmail,password)=>{try{const credentials={usernameOrEmail,password};console.log('Attempting login with:',credentials);const data=await authService.login(credentials);console.log('Login successful:',data);setCurrentUser(data.user);return data.user;}catch(error){console.error('Login error in AuthContext:',error);throw error;}};// Register function\nconst register=async userData=>{try{// Use fetch directly for registration to avoid circular dependencies\nconst response=await fetch('/api/auth/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});const data=await response.json();if(!response.ok){throw new Error(data.error||'Registration failed');}// Save token and user data\nauthService.setToken(data.token);setCurrentUser(data.user);return data.user;}catch(error){console.error('Registration error:',error);throw error;}};// Logout function\nconst logout=()=>{authService.logout();setCurrentUser(null);navigate('/login');};// Define the context value\nconst value={currentUser,loading,login,register,logout,isAuthenticated:!!currentUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jwt_decode","authService","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","navigate","verifyToken","token","getToken","decoded","currentTime","Date","now","exp","logout","console","log","response","fetch","headers","status","ok","Error","data","json","user","error","login","usernameOrEmail","password","credentials","register","userData","method","body","JSON","stringify","setToken","value","isAuthenticated","Provider"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport authService from '../services/authService';\n\n// Create context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  \n  // Check if user is already logged in on initial load\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const token = authService.getToken();\n        \n        if (!token) {\n          setCurrentUser(null);\n          setLoading(false);\n          return;\n        }\n        \n        // Check if token is expired\n        try {\n          const decoded = jwt_decode(token);\n          const currentTime = Date.now() / 1000;\n          \n          if (decoded.exp < currentTime) {\n            // Token is expired\n            logout();\n            return;\n          }\n          \n          // Token is valid, get current user data\n          console.log('Token is valid, getting user data');          \n          const response = await fetch('/api/auth/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          console.log('User data response status:', response.status);\n          \n          if (!response.ok) {\n            throw new Error('Failed to get user data');\n          }\n          \n          const data = await response.json();\n          setCurrentUser(data.user);\n        } catch (error) {\n          console.error('Token validation error:', error);\n          logout();\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    verifyToken();\n  }, []);\n  \n  // Login function\n  const login = async (usernameOrEmail, password) => {\n    try {\n      const credentials = { usernameOrEmail, password };\n      console.log('Attempting login with:', credentials);\n      \n      const data = await authService.login(credentials);\n      console.log('Login successful:', data);\n      \n      setCurrentUser(data.user);\n      return data.user;\n    } catch (error) {\n      console.error('Login error in AuthContext:', error);\n      throw error;\n    }\n  };\n  \n  // Register function\n  const register = async (userData) => {\n    try {\n      // Use fetch directly for registration to avoid circular dependencies\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n      \n      // Save token and user data\n      authService.setToken(data.token);\n      setCurrentUser(data.user);\n      \n      return data.user;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  \n  // Logout function\n  const logout = () => {\n    authService.logout();\n    setCurrentUser(null);\n    navigate('/login');\n  };\n  \n  // Define the context value\n  const value = {\n    currentUser,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}