{"ast":null,"code":"import axios from 'axios';\nimport authService from './authService';\n\n/**\n * Service for tournament-related API calls\n */\nconst tournamentService = {\n  /**\n   * Get all tournaments\n   * @param {Object} options - Query options\n   * @returns {Promise} Promise with tournaments data\n   */\n  async getTournaments(options = {}) {\n    const {\n      limit = 20,\n      offset = 0,\n      active,\n      public: isPublic\n    } = options;\n    let query = `/api/tournaments?limit=${limit}&offset=${offset}`;\n    if (active !== undefined) query += `&active=${active}`;\n    if (isPublic !== undefined) query += `&public=${isPublic}`;\n    const response = await axios.get(query);\n    return response.data;\n  },\n  /**\n   * Get tournament by ID\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with tournament data\n   */\n  async getTournament(id) {\n    const response = await axios.get(`/api/tournaments/${id}`);\n    return response.data;\n  },\n  /**\n   * Create new tournament\n   * @param {Object} tournamentData - Tournament data\n   * @returns {Promise} Promise with created tournament\n   */\n  async createTournament(tournamentData) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.post('/api/tournaments', tournamentData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Update tournament\n   * @param {string} id - Tournament ID\n   * @param {Object} tournamentData - Tournament data to update\n   * @returns {Promise} Promise with updated tournament\n   */\n  async updateTournament(id, tournamentData) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.put(`/api/tournaments/${id}`, tournamentData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Delete tournament\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with response data\n   */\n  async deleteTournament(id) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.delete(`/api/tournaments/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Get tournament matches\n   * @param {string} id - Tournament ID\n   * @param {string} platform - PUBG platform (default: 'steam')\n   * @returns {Promise} Promise with tournament matches\n   */\n  async getTournamentMatches(id, platform = 'steam') {\n    const response = await axios.get(`/api/tournaments/${id}/matches?platform=${platform}`);\n    return response.data;\n  },\n  /**\n   * Add matches to tournament\n   * @param {string} id - Tournament ID\n   * @param {Array} matchIds - Array of match IDs to add\n   * @param {string} stage - Tournament stage (default: 'group')\n   * @returns {Promise} Promise with response data\n   */\n  async addMatchesToTournament(id, matchIds, stage = 'group') {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.post(`/api/tournaments/${id}/matches`, {\n      matchIds,\n      stage\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Remove match from tournament\n   * @param {string} id - Tournament ID\n   * @param {string} matchId - Match ID to remove\n   * @returns {Promise} Promise with response data\n   */\n  async removeMatchFromTournament(id, matchId) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.delete(`/api/tournaments/${id}/matches/${matchId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Get tournament teams\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with tournament teams\n   */\n  async getTournamentTeams(id) {\n    const response = await axios.get(`/api/tournaments/${id}/teams`);\n    return response.data;\n  },\n  /**\n   * Add team to tournament\n   * @param {string} id - Tournament ID\n   * @param {string} teamId - Team ID to add\n   * @param {number} seedNumber - Seed number (optional)\n   * @returns {Promise} Promise with response data\n   */\n  async addTeamToTournament(id, teamId, seedNumber = null) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.post(`/api/tournaments/${id}/teams`, {\n      teamId,\n      seedNumber\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Remove team from tournament\n   * @param {string} id - Tournament ID\n   * @param {string} teamId - Team ID to remove\n   * @returns {Promise} Promise with response data\n   */\n  async removeTeamFromTournament(id, teamId) {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.delete(`/api/tournaments/${id}/teams/${teamId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Calculate tournament standings\n   * @param {string} id - Tournament ID\n   * @param {string} platform - PUBG platform (default: 'steam')\n   * @returns {Promise} Promise with calculated standings\n   */\n  async calculateTournamentStandings(id, platform = 'steam') {\n    const token = authService.getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await axios.post(`/api/tournaments/${id}/calculate-standings`, {\n      platform\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Get tournament leaderboard\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with tournament leaderboard\n   */\n  async getTournamentLeaderboard(id) {\n    const response = await axios.get(`/api/tournaments/${id}/leaderboard`);\n    return response.data;\n  }\n};\nexport default tournamentService;","map":{"version":3,"names":["axios","authService","tournamentService","getTournaments","options","limit","offset","active","public","isPublic","query","undefined","response","get","data","getTournament","id","createTournament","tournamentData","token","getToken","Error","post","headers","updateTournament","put","deleteTournament","delete","getTournamentMatches","platform","addMatchesToTournament","matchIds","stage","removeMatchFromTournament","matchId","getTournamentTeams","addTeamToTournament","teamId","seedNumber","removeTeamFromTournament","calculateTournamentStandings","getTournamentLeaderboard"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/tournamentService.js"],"sourcesContent":["import axios from 'axios';\nimport authService from './authService';\n\n/**\n * Service for tournament-related API calls\n */\nconst tournamentService = {\n  /**\n   * Get all tournaments\n   * @param {Object} options - Query options\n   * @returns {Promise} Promise with tournaments data\n   */\n  async getTournaments(options = {}) {\n    const { limit = 20, offset = 0, active, public: isPublic } = options;\n    \n    let query = `/api/tournaments?limit=${limit}&offset=${offset}`;\n    if (active !== undefined) query += `&active=${active}`;\n    if (isPublic !== undefined) query += `&public=${isPublic}`;\n    \n    const response = await axios.get(query);\n    return response.data;\n  },\n  \n  /**\n   * Get tournament by ID\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with tournament data\n   */\n  async getTournament(id) {\n    const response = await axios.get(`/api/tournaments/${id}`);\n    return response.data;\n  },\n  \n  /**\n   * Create new tournament\n   * @param {Object} tournamentData - Tournament data\n   * @returns {Promise} Promise with created tournament\n   */\n  async createTournament(tournamentData) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.post('/api/tournaments', tournamentData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Update tournament\n   * @param {string} id - Tournament ID\n   * @param {Object} tournamentData - Tournament data to update\n   * @returns {Promise} Promise with updated tournament\n   */\n  async updateTournament(id, tournamentData) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.put(`/api/tournaments/${id}`, tournamentData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Delete tournament\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with response data\n   */\n  async deleteTournament(id) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.delete(`/api/tournaments/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Get tournament matches\n   * @param {string} id - Tournament ID\n   * @param {string} platform - PUBG platform (default: 'steam')\n   * @returns {Promise} Promise with tournament matches\n   */\n  async getTournamentMatches(id, platform = 'steam') {\n    const response = await axios.get(`/api/tournaments/${id}/matches?platform=${platform}`);\n    return response.data;\n  },\n  \n  /**\n   * Add matches to tournament\n   * @param {string} id - Tournament ID\n   * @param {Array} matchIds - Array of match IDs to add\n   * @param {string} stage - Tournament stage (default: 'group')\n   * @returns {Promise} Promise with response data\n   */\n  async addMatchesToTournament(id, matchIds, stage = 'group') {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.post(`/api/tournaments/${id}/matches`, \n      { matchIds, stage },\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    );\n    \n    return response.data;\n  },\n  \n  /**\n   * Remove match from tournament\n   * @param {string} id - Tournament ID\n   * @param {string} matchId - Match ID to remove\n   * @returns {Promise} Promise with response data\n   */\n  async removeMatchFromTournament(id, matchId) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.delete(`/api/tournaments/${id}/matches/${matchId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Get tournament teams\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with tournament teams\n   */\n  async getTournamentTeams(id) {\n    const response = await axios.get(`/api/tournaments/${id}/teams`);\n    return response.data;\n  },\n  \n  /**\n   * Add team to tournament\n   * @param {string} id - Tournament ID\n   * @param {string} teamId - Team ID to add\n   * @param {number} seedNumber - Seed number (optional)\n   * @returns {Promise} Promise with response data\n   */\n  async addTeamToTournament(id, teamId, seedNumber = null) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.post(`/api/tournaments/${id}/teams`, \n      { teamId, seedNumber },\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    );\n    \n    return response.data;\n  },\n  \n  /**\n   * Remove team from tournament\n   * @param {string} id - Tournament ID\n   * @param {string} teamId - Team ID to remove\n   * @returns {Promise} Promise with response data\n   */\n  async removeTeamFromTournament(id, teamId) {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.delete(`/api/tournaments/${id}/teams/${teamId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  },\n  \n  /**\n   * Calculate tournament standings\n   * @param {string} id - Tournament ID\n   * @param {string} platform - PUBG platform (default: 'steam')\n   * @returns {Promise} Promise with calculated standings\n   */\n  async calculateTournamentStandings(id, platform = 'steam') {\n    const token = authService.getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const response = await axios.post(`/api/tournaments/${id}/calculate-standings`, \n      { platform },\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    );\n    \n    return response.data;\n  },\n  \n  /**\n   * Get tournament leaderboard\n   * @param {string} id - Tournament ID\n   * @returns {Promise} Promise with tournament leaderboard\n   */\n  async getTournamentLeaderboard(id) {\n    const response = await axios.get(`/api/tournaments/${id}/leaderboard`);\n    return response.data;\n  }\n};\n\nexport default tournamentService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}