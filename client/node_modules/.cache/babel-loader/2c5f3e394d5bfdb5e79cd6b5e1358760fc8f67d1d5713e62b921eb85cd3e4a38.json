{"ast":null,"code":"// authService.js - Handle JWT authentication and tokens\n\nconst TOKEN_KEY = 'pubg_tracker_auth_token';\nconst USER_DATA_KEY = 'pubg_tracker_user_data';\n\n// Auth service for JWT token management\nconst authService = {\n  /**\n   * Set the authentication token\n   * @param {string} token - JWT token\n   */\n  setToken(token) {\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    }\n  },\n  /**\n   * Get the current authentication token\n   * @returns {string|null} JWT token or null if not logged in\n   */\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  /**\n   * Set user data in local storage\n   * @param {Object} userData - User data object\n   */\n  setUserData(userData) {\n    if (userData) {\n      localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n    }\n  },\n  /**\n   * Get current user data\n   * @returns {Object|null} User data or null if not logged in\n   */\n  getUserData() {\n    const userDataStr = localStorage.getItem(USER_DATA_KEY);\n    if (userDataStr) {\n      try {\n        return JSON.parse(userDataStr);\n      } catch (error) {\n        console.error('Error parsing user data from localStorage', error);\n        return null;\n      }\n    }\n    return null;\n  },\n  /**\n   * Check if user is logged in\n   * @returns {boolean} True if logged in\n   */\n  isLoggedIn() {\n    return !!this.getToken();\n  },\n  /**\n   * Get user ID of logged in user\n   * @returns {string|null} User ID or null if not logged in\n   */\n  getUserId() {\n    const userData = this.getUserData();\n    return userData ? userData.id : null;\n  },\n  /**\n   * Check if user has admin role\n   * @returns {boolean} True if user is admin\n   */\n  isAdmin() {\n    const userData = this.getUserData();\n    return userData ? userData.role === 'admin' : false;\n  },\n  /**\n   * Logout user by removing token and user data\n   */\n  logout() {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_DATA_KEY);\n  }\n};\nexport default authService;","map":{"version":3,"names":["TOKEN_KEY","USER_DATA_KEY","authService","setToken","token","localStorage","setItem","getToken","getItem","setUserData","userData","JSON","stringify","getUserData","userDataStr","parse","error","console","isLoggedIn","getUserId","id","isAdmin","role","logout","removeItem"],"sources":["C:/Users/emil/OneDrive/Documents/development/apiDevelopment/pubg-tournament-tracker/client/src/services/authService.js"],"sourcesContent":["// authService.js - Handle JWT authentication and tokens\n\nconst TOKEN_KEY = 'pubg_tracker_auth_token';\nconst USER_DATA_KEY = 'pubg_tracker_user_data';\n\n// Auth service for JWT token management\nconst authService = {\n  /**\n   * Set the authentication token\n   * @param {string} token - JWT token\n   */\n  setToken(token) {\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    }\n  },\n  \n  /**\n   * Get the current authentication token\n   * @returns {string|null} JWT token or null if not logged in\n   */\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  \n  /**\n   * Set user data in local storage\n   * @param {Object} userData - User data object\n   */\n  setUserData(userData) {\n    if (userData) {\n      localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n    }\n  },\n  \n  /**\n   * Get current user data\n   * @returns {Object|null} User data or null if not logged in\n   */\n  getUserData() {\n    const userDataStr = localStorage.getItem(USER_DATA_KEY);\n    if (userDataStr) {\n      try {\n        return JSON.parse(userDataStr);\n      } catch (error) {\n        console.error('Error parsing user data from localStorage', error);\n        return null;\n      }\n    }\n    return null;\n  },\n  \n  /**\n   * Check if user is logged in\n   * @returns {boolean} True if logged in\n   */\n  isLoggedIn() {\n    return !!this.getToken();\n  },\n  \n  /**\n   * Get user ID of logged in user\n   * @returns {string|null} User ID or null if not logged in\n   */\n  getUserId() {\n    const userData = this.getUserData();\n    return userData ? userData.id : null;\n  },\n  \n  /**\n   * Check if user has admin role\n   * @returns {boolean} True if user is admin\n   */\n  isAdmin() {\n    const userData = this.getUserData();\n    return userData ? userData.role === 'admin' : false;\n  },\n  \n  /**\n   * Logout user by removing token and user data\n   */\n  logout() {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_DATA_KEY);\n  }\n};\n\nexport default authService;"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,yBAAyB;AAC3C,MAAMC,aAAa,GAAG,wBAAwB;;AAE9C;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;EACEC,QAAQA,CAACC,KAAK,EAAE;IACd,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACC,OAAO,CAACN,SAAS,EAAEI,KAAK,CAAC;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;EACEG,QAAQA,CAAA,EAAG;IACT,OAAOF,YAAY,CAACG,OAAO,CAACR,SAAS,CAAC;EACxC,CAAC;EAED;AACF;AACA;AACA;EACES,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAIA,QAAQ,EAAE;MACZL,YAAY,CAACC,OAAO,CAACL,aAAa,EAAEU,IAAI,CAACC,SAAS,CAACF,QAAQ,CAAC,CAAC;IAC/D;EACF,CAAC;EAED;AACF;AACA;AACA;EACEG,WAAWA,CAAA,EAAG;IACZ,MAAMC,WAAW,GAAGT,YAAY,CAACG,OAAO,CAACP,aAAa,CAAC;IACvD,IAAIa,WAAW,EAAE;MACf,IAAI;QACF,OAAOH,IAAI,CAACI,KAAK,CAACD,WAAW,CAAC;MAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;QACjE,OAAO,IAAI;MACb;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED;AACF;AACA;AACA;EACEE,UAAUA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC,IAAI,CAACX,QAAQ,CAAC,CAAC;EAC1B,CAAC;EAED;AACF;AACA;AACA;EACEY,SAASA,CAAA,EAAG;IACV,MAAMT,QAAQ,GAAG,IAAI,CAACG,WAAW,CAAC,CAAC;IACnC,OAAOH,QAAQ,GAAGA,QAAQ,CAACU,EAAE,GAAG,IAAI;EACtC,CAAC;EAED;AACF;AACA;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,MAAMX,QAAQ,GAAG,IAAI,CAACG,WAAW,CAAC,CAAC;IACnC,OAAOH,QAAQ,GAAGA,QAAQ,CAACY,IAAI,KAAK,OAAO,GAAG,KAAK;EACrD,CAAC;EAED;AACF;AACA;EACEC,MAAMA,CAAA,EAAG;IACPlB,YAAY,CAACmB,UAAU,CAACxB,SAAS,CAAC;IAClCK,YAAY,CAACmB,UAAU,CAACvB,aAAa,CAAC;EACxC;AACF,CAAC;AAED,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}